import _reduceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/reduce";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _findInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/find";
import _someInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/some";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import _Date$now from "@babel/runtime-corejs3/core-js-stable/date/now";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/esm/asyncToGenerator";
import { SplitFactory } from '../../';
import SettingsFactory from '../../utils/settings';
import splitChangesMock1 from '../mocks/splitchanges.since.-1.json';
import splitChangesMock2 from '../mocks/splitchanges.since.1457552620999.json';
var baseUrls = {
  sdk: 'https://sdk.baseurl/metricsSuite',
  events: 'https://events.baseurl/metricsSuite'
};
var settings = SettingsFactory({
  core: {
    key: '<fake id>'
  },
  urls: baseUrls
});
var config = {
  core: {
    authorizationKey: '<fake-token-2>'
  },
  scheduler: {
    featuresRefreshRate: 99999,
    segmentsRefreshRate: 99999,
    metricsRefreshRate: 3,
    impressionsRefreshRate: 99999
  },
  urls: baseUrls,
  startup: {
    eventsFirstPushWindow: 3000
  }
};
export default function (_x, _x2, _x3) {
  return _ref.apply(this, arguments);
}

function _ref() {
  _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(key, fetchMock, assert) {
    var segmentChangesUrlRegex, splitio, client, finish;
    return _regeneratorRuntime.wrap(function _callee2$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            segmentChangesUrlRegex = new RegExp("".concat(baseUrls.sdk, "/segmentChanges/*"));
            fetchMock.getOnce(settings.url('/splitChanges?since=-1'), 500);
            fetchMock.getOnce(settings.url('/splitChanges?since=-1'), {
              status: 200,
              body: splitChangesMock1
            });
            fetchMock.getOnce(segmentChangesUrlRegex, {
              status: 200,
              body: {
                since: 10,
                till: 10,
                name: 'segmentName',
                added: [],
                removed: []
              }
            });
            fetchMock.getOnce(segmentChangesUrlRegex, 401);
            fetchMock.getOnce(segmentChangesUrlRegex, 500);
            fetchMock.get(segmentChangesUrlRegex, {
              status: 200,
              body: {
                since: 10,
                till: 10,
                name: 'segmentName' + _Date$now(),
                added: [],
                removed: []
              }
            }); // Should not execute but adding just in case.

            fetchMock.get(settings.url('/splitChanges?since=1457552620999'), {
              status: 200,
              body: splitChangesMock2
            });
            fetchMock.postOnce(settings.url('/testImpressions/bulk'), 200);
            splitio = SplitFactory(config);
            client = splitio.client();
            finish = /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
              return _regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.next = 2;
                      return;

                    case 2:
                      client.destroy();
                      assert.end();

                    case 4:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            })();
            fetchMock.postOnce(settings.url('/metrics/times'), function (url, opts) {
              var data = JSON.parse(opts.body);
              assert.equal(data.length, 7, 'We performed 4 correct evaluation requests (one per method) plus ready, splits and segments, so we should have 7 latency metrics.');

              var latencyMetricsRecorded = _filterInstanceProperty(data).call(data, function (metric) {
                var _context2;

                // At least one latency registed per metric
                return _someInstanceProperty(_context2 = metric.latencies).call(_context2, function (count) {
                  return count > 0;
                });
              }); // If we have 7 items, it is because each one had at least ONE entry.


              assert.equal(latencyMetricsRecorded.length, 7, 'Each metric has at least one enty, matching the calls.');

              var getLatencyCount = function getLatencyCount(metricName) {
                var _context3;

                var latencyMetric = _findInstanceProperty(data).call(data, function (metric) {
                  return metric.name === metricName;
                });

                if (!latencyMetric && !_Array$isArray(latencyMetric.latencies)) return 0;
                return _reduceInstanceProperty(_context3 = latencyMetric.latencies).call(_context3, function (accum, entry) {
                  return accum + entry;
                }, 0);
              }; // Validate both names and values.


              assert.equal(getLatencyCount('splitChangeFetcher.time'), 2, 'Two latency metrics for splitChanges');
              assert.equal(getLatencyCount('segmentChangeFetcher.time'), 1, 'One latency metric for segmentChangeFetcher');
              assert.equal(getLatencyCount('sdk.ready'), 1, 'One latency metric for ready');
              assert.equal(getLatencyCount('sdk.getTreatment'), 1, 'One latency metric for getTreatment');
              assert.equal(getLatencyCount('sdk.getTreatments'), 1, 'One latency metric for getTreatments');
              assert.equal(getLatencyCount('sdk.getTreatmentWithConfig'), 1, 'One latency metric for getTreatmentWithConfig');
              assert.equal(getLatencyCount('sdk.getTreatmentsWithConfig'), 1, 'One latency metric for getTreatmentsWithConfig');
              finish.next();
              return 200;
            });
            fetchMock.postOnce(settings.url('/metrics/counters'), function (url, opts) {
              var data = JSON.parse(opts.body);
              assert.equal(data.length, 4, 'Based on the mock setup, we should have four items.');

              var countMetricsRecorded = _reduceInstanceProperty(data).call(data, function (accum, metric) {
                return accum + metric.delta;
              }, 0);

              var getRecordsCount = function getRecordsCount(metricName) {
                var countMetric = _findInstanceProperty(data).call(data, function (metric) {
                  return metric.name === metricName;
                });

                if (!countMetric) return 0;
                return countMetric.delta;
              }; // 5 items:
              // For splitChanges, 1 exception and 1 200.
              // For segmentChanges (3 segments) 1 with 200, two errors.


              assert.equal(countMetricsRecorded, 5, 'Each metric has one entry, same as the amount of calls.'); // break down

              assert.equal(getRecordsCount('splitChangeFetcher.exception'), 1, 'The metric names and delta should correspond to the SDK behaviour.');
              assert.equal(getRecordsCount('segmentChangeFetcher.exception'), 2, 'The metric names and delta should correspond to the SDK behaviour.');
              assert.equal(getRecordsCount('splitChangeFetcher.status.200'), 1, 'The metric names and delta should correspond to the SDK behaviour.');
              assert.equal(getRecordsCount('segmentChangeFetcher.status.200'), 1, 'The metric names and delta should correspond to the SDK behaviour.');
              finish.next();
              return 200;
            });
            _context4.next = 16;
            return client.ready();

          case 16:
            // treatments and results are only validated so we know for sure when the function was actually running to compare the metrics.
            assert.equal(client.getTreatment(key, 'always_on'), 'on', 'Evaluation was correct.');
            assert.equal(client.getTreatment(false, 'always_on'), 'control', 'We should return control with invalid input.');
            assert.deepEqual(client.getTreatmentWithConfig(key, 'split_with_config'), {
              treatment: 'on',
              config: '{"color":"brown","dimensions":{"height":12,"width":14},"text":{"inner":"click me"}}'
            }, 'Evaluation with config was correct.');
            assert.deepEqual(client.getTreatmentWithConfig(null, 'split_with_config'), {
              treatment: 'control',
              config: null
            }, 'Evaluation with config returned control state for invalid input.');
            assert.deepEqual(client.getTreatments(key, ['always_on', 'always_off']), {
              always_on: 'on',
              always_off: 'off'
            }, 'Evaluations were correct.');
            assert.deepEqual(client.getTreatments(false, ['always_on', 'always_off', null]), {
              always_on: 'control',
              always_off: 'control'
            }, 'We should return map of controls with invalid input.');
            assert.deepEqual(client.getTreatmentsWithConfig(key, ['split_with_config', 'always_on', null]), {
              split_with_config: {
                treatment: 'on',
                config: '{"color":"brown","dimensions":{"height":12,"width":14},"text":{"inner":"click me"}}'
              },
              always_on: {
                treatment: 'on',
                config: null
              }
            }, 'Evaluations with config were correct.');
            assert.deepEqual(client.getTreatmentsWithConfig(null, ['split_with_config', 'always_on', null]), {
              split_with_config: {
                treatment: 'control',
                config: null
              },
              always_on: {
                treatment: 'control',
                config: null
              }
            }, 'Evaluations with config returned control states for invalid input.');

          case 24:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee2);
  }));
  return _ref.apply(this, arguments);
}
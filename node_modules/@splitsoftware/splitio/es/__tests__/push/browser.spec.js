import _bindInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/bind";
import tape from 'tape-catch';
import fetchMock from '../utils/fetchMock';
import { testAuthWithPushDisabled, testAuthWith401, testNoEventSource, testNoBase64Support } from '../browserSuites/push-initialization-nopush.spec';
import { testAuthRetries, testSSERetries } from '../browserSuites/push-initialization-retries.spec';
import { testSynchronization } from '../browserSuites/push-synchronization.spec';
import { testSynchronizationRetries } from '../browserSuites/push-synchronization-retries.spec';
import { testFallbacking } from '../browserSuites/push-fallbacking.spec';
import { testRefreshToken } from '../browserSuites/push-refresh-token.spec';
fetchMock.config.overwriteRoutes = false;
tape('## Browser JS - E2E CI Tests for PUSH ##', function (assert) {
  assert.test('E2E / PUSH initialization: auth with push disabled', _bindInstanceProperty(testAuthWithPushDisabled).call(testAuthWithPushDisabled, null, fetchMock));
  assert.test('E2E / PUSH initialization: auth with 401', _bindInstanceProperty(testAuthWith401).call(testAuthWith401, null, fetchMock));
  assert.test('E2E / PUSH initialization: fallback to polling if EventSource is not available', _bindInstanceProperty(testNoEventSource).call(testNoEventSource, null, fetchMock));
  assert.test('E2E / PUSH initialization: fallback to polling if EventSource is not available', _bindInstanceProperty(testNoBase64Support).call(testNoBase64Support, null, fetchMock));
  assert.test('E2E / PUSH initialization: auth failures and then success', _bindInstanceProperty(testAuthRetries).call(testAuthRetries, null, fetchMock));
  assert.test('E2E / PUSH initialization: SSE connection failures and then success', _bindInstanceProperty(testSSERetries).call(testSSERetries, null, fetchMock));
  assert.test('E2E / PUSH synchronization: happy paths', _bindInstanceProperty(testSynchronization).call(testSynchronization, null, fetchMock));
  assert.test('E2E / PUSH synchronization: retries', _bindInstanceProperty(testSynchronizationRetries).call(testSynchronizationRetries, null, fetchMock));
  assert.test('E2E / PUSH fallbacking', _bindInstanceProperty(testFallbacking).call(testFallbacking, null, fetchMock));
  assert.test('E2E / PUSH refresh token', _bindInstanceProperty(testRefreshToken).call(testRefreshToken, null, fetchMock));
  assert.end();
});
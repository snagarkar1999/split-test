import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import _bindInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/bind";
import _asyncToGenerator from "@babel/runtime-corejs3/helpers/esm/asyncToGenerator";
import tape from 'tape-catch';
import fetchMock from '../utils/fetchMock';
import { testAuthWithPushDisabled, testAuthWith401, testNoEventSource } from '../nodeSuites/push-initialization-nopush.spec';
import { testAuthRetries, testSSERetries } from '../nodeSuites/push-initialization-retries.spec';
import { testSynchronization } from '../nodeSuites/push-synchronization.spec';
import { testSynchronizationRetries } from '../nodeSuites/push-synchronization-retries.spec';
import { testFallbacking } from '../nodeSuites/push-fallbacking.spec';
import { testRefreshToken } from '../nodeSuites/push-refresh-token.spec';
fetchMock.config.overwriteRoutes = false;
tape('## Node JS - E2E CI Tests for PUSH ##', /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(assert) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            assert.test('E2E / PUSH initialization: auth with push disabled', _bindInstanceProperty(testAuthWithPushDisabled).call(testAuthWithPushDisabled, null, fetchMock));
            assert.test('E2E / PUSH initialization: auth with 401', _bindInstanceProperty(testAuthWith401).call(testAuthWith401, null, fetchMock));
            assert.test('E2E / PUSH initialization: fallback to polling if EventSource is not available', _bindInstanceProperty(testNoEventSource).call(testNoEventSource, null, fetchMock));
            assert.test('E2E / PUSH initialization: auth failures and then success', _bindInstanceProperty(testAuthRetries).call(testAuthRetries, null, fetchMock));
            assert.test('E2E / PUSH initialization: SSE connection failures and then success', _bindInstanceProperty(testSSERetries).call(testSSERetries, null, fetchMock));
            assert.test('E2E / PUSH synchronization: happy paths', _bindInstanceProperty(testSynchronization).call(testSynchronization, null, fetchMock));
            assert.test('E2E / PUSH synchronization: retries', _bindInstanceProperty(testSynchronizationRetries).call(testSynchronizationRetries, null, fetchMock));
            assert.test('E2E / PUSH fallbacking', _bindInstanceProperty(testFallbacking).call(testFallbacking, null, fetchMock));
            assert.test('E2E / PUSH refresh token', _bindInstanceProperty(testRefreshToken).call(testRefreshToken, null, fetchMock));
            assert.end();

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());
import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _defineProperty from "@babel/runtime-corejs3/helpers/esm/defineProperty";
import _setTimeout from "@babel/runtime-corejs3/core-js-stable/set-timeout";
import _Date$now from "@babel/runtime-corejs3/core-js-stable/date/now";

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context; _forEachInstanceProperty(_context = ownKeys(Object(source), true)).call(_context, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context2; _forEachInstanceProperty(_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

import tape from 'tape-catch';
import sinon from 'sinon';
import fetchMock from '../utils/fetchMock';
import { SplitFactory } from '../../';
import SettingsFactory from '../../utils/settings';
var settings = SettingsFactory({
  core: {
    key: 'facundo@split.io'
  }
});
var spySplitChanges = sinon.spy();
var spySegmentChanges = sinon.spy();
var spyMySegments = sinon.spy();
var spyEventsBulk = sinon.spy();
var spyTestImpressionsBulk = sinon.spy();
var spyMetricsTimes = sinon.spy();
var spyMetricsCounters = sinon.spy();
var spyAny = sinon.spy(); // helper function that should call the spy function and return a 200 to keep
// going the fetch request flow

var replySpy = function replySpy(spy) {
  spy();
  return 200;
};

var configMocks = function configMocks() {
  fetchMock.mock(new RegExp("".concat(settings.url('/splitChanges/'), ".*")), function () {
    return replySpy(spySplitChanges);
  });
  fetchMock.mock(new RegExp("".concat(settings.url('/segmentChanges/'), ".*")), function () {
    return replySpy(spySegmentChanges);
  });
  fetchMock.mock(new RegExp("".concat(settings.url('/mySegments/'), ".*")), function () {
    return replySpy(spyMySegments);
  });
  fetchMock.mock(settings.url('/events/bulk'), function () {
    return replySpy(spyEventsBulk);
  });
  fetchMock.mock(settings.url('/testImpressions/bulk'), function () {
    return replySpy(spyTestImpressionsBulk);
  });
  fetchMock.mock(settings.url('/metrics/times'), function () {
    return replySpy(spyMetricsTimes);
  });
  fetchMock.mock(settings.url('/metrics/counters'), function () {
    return replySpy(spyMetricsCounters);
  });
  fetchMock.mock('*', function () {
    return replySpy(spyAny);
  });
};

tape('Browser offline mode', function (assert) {
  configMocks();
  var originalFeaturesMap = {
    testing_split: 'on',
    testing_split_with_config: {
      treatment: 'off',
      config: '{ "color": "blue" }'
    }
  };
  var config = {
    core: {
      authorizationKey: 'localhost'
    },
    scheduler: {
      impressionsRefreshRate: 0.01,
      eventsPushRate: 0.01,
      metricsRefreshRate: 0.01,
      offlineRefreshRate: 0.19
    },
    startup: {
      eventsFirstPushWindow: 0
    },
    features: originalFeaturesMap
  };
  var factory = SplitFactory(config);
  var manager = factory.manager();
  var client = factory.client();
  var sharedClient = factory.client('nicolas.zelaya@split.io'); // Tracking some events to test they are not flushed.

  assert["true"](client.track('a_tt', 'an_ev_id'));
  assert["true"](client.track('another_tt', 'another_ev_id', 25));
  assert["false"](client.track({}, [], 'invalid_stuff'));
  assert["true"](sharedClient.track('a_tt', 'another_ev_id', 10));
  assert.equal(client.getTreatment('testing_split'), 'control');
  assert.equal(manager.splits().length, 0);
  client.once(client.Event.SDK_READY, function () {
    var readyTimestamp = _Date$now(); // Check the information through the client original instance


    assert.equal(client.getTreatment('testing_split'), 'on');
    assert.equal(client.getTreatment('testing_split_2'), 'control');
    assert.equal(client.getTreatment('testing_split_with_config'), 'off');
    assert.deepEqual(client.getTreatments(['testing_split', 'testing_split_2', 'testing_split_with_config']), {
      testing_split: 'on',
      testing_split_2: 'control',
      testing_split_with_config: 'off'
    }); // with config

    assert.deepEqual(client.getTreatmentWithConfig('testing_split'), {
      treatment: 'on',
      config: null
    });
    assert.deepEqual(client.getTreatmentWithConfig('testing_split_with_config'), {
      treatment: 'off',
      config: '{ "color": "blue" }'
    });
    assert.deepEqual(client.getTreatmentsWithConfig(['testing_split', 'testing_split_2', 'testing_split_with_config']), {
      testing_split: {
        treatment: 'on',
        config: null
      },
      testing_split_2: {
        treatment: 'control',
        config: null
      },
      testing_split_with_config: {
        treatment: 'off',
        config: '{ "color": "blue" }'
      }
    }); // Manager tests

    var expectedSplitView1 = {
      name: 'testing_split',
      trafficType: null,
      killed: false,
      changeNumber: 0,
      treatments: ['on'],
      configs: {}
    };
    var expectedSplitView2 = {
      name: 'testing_split_with_config',
      trafficType: null,
      killed: false,
      changeNumber: 0,
      treatments: ['off'],
      configs: {
        off: '{ "color": "blue" }'
      }
    };
    assert.deepEqual(manager.names(), ['testing_split', 'testing_split_with_config']);
    assert.deepEqual(manager.split('testing_split'), expectedSplitView1);
    assert.deepEqual(manager.split('testing_split_with_config'), expectedSplitView2);
    assert.deepEqual(manager.split('not_existent'), null);
    assert.deepEqual(manager.splits(), [expectedSplitView1, expectedSplitView2]); // And then through the shared instance.

    assert.equal(sharedClient.getTreatment('testing_split'), 'on');
    assert.equal(sharedClient.getTreatment('testing_split_2'), 'control');
    assert.deepEqual(sharedClient.getTreatments(['testing_split', 'testing_split_2', 'testing_split_with_config']), {
      testing_split: 'on',
      testing_split_2: 'control',
      testing_split_with_config: 'off'
    }); // with config

    assert.deepEqual(sharedClient.getTreatmentWithConfig('testing_split'), {
      treatment: 'on',
      config: null
    });
    assert.deepEqual(sharedClient.getTreatmentsWithConfig(['testing_split', 'testing_split_2', 'testing_split_with_config']), {
      testing_split: {
        treatment: 'on',
        config: null
      },
      testing_split_2: {
        treatment: 'control',
        config: null
      },
      testing_split_with_config: {
        treatment: 'off',
        config: '{ "color": "blue" }'
      }
    });

    _setTimeout(function () {
      // Update the features.
      factory.settings.features = {
        testing_split: 'on',
        testing_split_2: 'off',
        testing_split_3: 'custom_treatment',
        testing_split_with_config: {
          treatment: 'nope',
          config: null
        }
      };
    }, 1000);

    _setTimeout(function () {
      factory.settings.features = originalFeaturesMap;
    }, 200);

    _setTimeout(function () {
      factory.settings.features = {
        testing_split: 'on',
        testing_split_with_config: {
          treatment: 'off',
          config: '{ "color": "blue" }'
        }
      };
    }, 400);

    _setTimeout(function () {
      factory.settings.features = originalFeaturesMap;
    }, 600);

    _setTimeout(function () {
      factory.settings.features = {
        testing_split: 'on',
        testing_split_with_config: {
          treatment: 'off',
          config: '{ "color": "blue" }'
        }
      };
    }, 750); // once updated, test again.


    client.once(client.Event.SDK_UPDATE, function () {
      assert["true"](_Date$now() - readyTimestamp > 1000, 'Should only emit SDK_UPDATE after a real update.');
      assert.equal(client.getTreatment('testing_split_2'), 'off');
      assert.equal(client.getTreatment('testing_split_3'), 'custom_treatment');
      assert.deepEqual(client.getTreatmentWithConfig('testing_split_3'), {
        treatment: 'custom_treatment',
        config: null
      });
      assert.deepEqual(client.getTreatmentWithConfig('testing_split_with_config'), {
        treatment: 'nope',
        config: null
      });
      assert.deepEqual(client.getTreatments(['testing_split', 'testing_split_2', 'testing_split_3', 'testing_split_with_config', 'testing_not_exist']), {
        testing_split: 'on',
        testing_split_2: 'off',
        testing_split_3: 'custom_treatment',
        testing_split_with_config: 'nope',
        testing_not_exist: 'control'
      });
      assert.deepEqual(client.getTreatmentsWithConfig(['testing_split_2', 'testing_split_3', 'testing_split_with_config']), {
        testing_split_2: {
          treatment: 'off',
          config: null
        },
        testing_split_3: {
          treatment: 'custom_treatment',
          config: null
        },
        testing_split_with_config: {
          treatment: 'nope',
          config: null
        }
      }); // Manager tests

      var expectedSplitView3 = {
        name: 'testing_split_with_config',
        trafficType: null,
        killed: false,
        changeNumber: 0,
        treatments: ['nope'],
        configs: {}
      };
      assert.deepEqual(manager.names(), ['testing_split', 'testing_split_2', 'testing_split_3', 'testing_split_with_config']);
      assert.deepEqual(manager.split('testing_split'), expectedSplitView1);
      assert.deepEqual(manager.split('not_existent'), null);
      assert.deepEqual(manager.split('testing_split_with_config'), expectedSplitView3);
      assert.deepEqual(manager.splits(), [expectedSplitView1, _objectSpread({}, expectedSplitView3, {
        name: 'testing_split_2',
        treatments: ['off']
      }), _objectSpread({}, expectedSplitView3, {
        name: 'testing_split_3',
        treatments: ['custom_treatment']
      }), expectedSplitView3]); // Test shared client for the same data

      assert.equal(sharedClient.getTreatment('testing_split_2'), 'off');
      assert.equal(sharedClient.getTreatment('testing_split_3'), 'custom_treatment');
      assert.deepEqual(sharedClient.getTreatmentWithConfig('testing_split_3'), {
        treatment: 'custom_treatment',
        config: null
      });
      assert.deepEqual(sharedClient.getTreatmentWithConfig('testing_split_with_config'), {
        treatment: 'nope',
        config: null
      });
      assert.deepEqual(sharedClient.getTreatments(['testing_split', 'testing_split_2', 'testing_split_3', 'testing_not_exist']), {
        testing_split: 'on',
        testing_split_2: 'off',
        testing_split_3: 'custom_treatment',
        testing_not_exist: 'control'
      });
      assert.deepEqual(sharedClient.getTreatmentsWithConfig(['testing_split_3', 'testing_not_exist']), {
        testing_split_3: {
          treatment: 'custom_treatment',
          config: null
        },
        testing_not_exist: {
          treatment: 'control',
          config: null
        }
      });
      var sharedClientDestroyPromise = sharedClient.destroy();
      var mainClientDestroyPromise = client.destroy(); // When both promises have been resolved, we check for network activity

      _Promise.all([sharedClientDestroyPromise, mainClientDestroyPromise]).then(function () {
        // We test the breakdown instead of just the misc because it's faster to spot where the issue is
        assert.notOk(spySplitChanges.called, 'On offline mode we should not call the splitChanges endpoint.');
        assert.notOk(spySegmentChanges.called, 'On offline mode we should not call the segmentChanges endpoint.');
        assert.notOk(spyMySegments.called, 'On offline mode we should not call the mySegments endpoint.');
        assert.notOk(spyEventsBulk.called, 'On offline mode we should not call the events endpoint.');
        assert.notOk(spyTestImpressionsBulk.called, 'On offline mode we should not call the impressions endpoint.');
        assert.notOk(spyMetricsTimes.called, 'On offline mode we should not call the metric times endpoint.');
        assert.notOk(spyMetricsCounters.called, 'On offline mode we should not call the metric counters endpoint.');
        assert.notOk(spyAny.called, 'On offline mode we should NOT call to ANY endpoint, we are completely isolated from BE.');
        assert.end();
      });
    }, 3500);
  });
});
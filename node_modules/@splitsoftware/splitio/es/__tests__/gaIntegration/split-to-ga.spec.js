import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _defineProperty from "@babel/runtime-corejs3/helpers/esm/defineProperty";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import _setTimeout from "@babel/runtime-corejs3/core-js-stable/set-timeout";
import _reduceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/reduce";

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context12; _forEachInstanceProperty(_context12 = ownKeys(Object(source), true)).call(_context12, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context13; _forEachInstanceProperty(_context13 = ownKeys(Object(source))).call(_context13, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

import sinon from 'sinon';
import { SplitFactory } from '../..';
import SettingsFactory from '../../utils/settings';
import { gaSpy, gaTag, removeGaTag, addGaTag } from './gaTestUtils';
import { SPLIT_IMPRESSION, SPLIT_EVENT } from '../../utils/constants';

function countImpressions(parsedImpressionsBulkPayload) {
  return _reduceInstanceProperty(parsedImpressionsBulkPayload).call(parsedImpressionsBulkPayload, function (accumulator, currentValue) {
    return accumulator + currentValue.keyImpressions.length;
  }, 0);
}

var config = {
  core: {
    authorizationKey: '<some-token>',
    key: 'facundo@split.io',
    trafficType: 'user'
  },
  integrations: [{
    type: 'SPLIT_TO_GOOGLE_ANALYTICS'
  }],
  scheduler: {
    impressionsRefreshRate: 0.2,
    eventsQueueSize: 1
  }
};
var settings = SettingsFactory(config);
export default function (fetchMock, assert) {
  // test default behavior
  assert.test(function (t) {
    var client; // Generator to synchronize the call of t.end() when both impressions and events endpoints were invoked.

    var finish = /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return;

            case 2:
              t.equal(window.gaSpy.getHits().length, 3, 'Total hits are 3: pageview, split event and impression');

              _setTimeout(function () {
                client.destroy();
                t.end();
              });

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })();

    fetchMock.postOnce(settings.url('/testImpressions/bulk'), function (url, opts) {
      // we can assert payload and ga hits, once ga is ready and after `SplitToGa.queue`, that is timeout wrapped, make to the queue stack.
      _setTimeout(function () {
        window.ga(function () {
          var _context2;

          var resp = JSON.parse(opts.body);
          var sentImpressions = countImpressions(resp);

          var sentImpressionHits = _filterInstanceProperty(_context2 = window.gaSpy.getHits()).call(_context2, function (hit) {
            return hit.eventCategory === 'split-impression';
          });

          t.equal(sentImpressions, 1, 'Number of impressions');
          t.equal(sentImpressions, sentImpressionHits.length, "Number of sent impression hits must be equal to the number of impressions (".concat(sentImpressions, ")"));
          finish.next();
        });
      });

      return 200;
    });
    fetchMock.postOnce(settings.url('/events/bulk'), function (url, opts) {
      // @TODO review why it is not working with a delay of 0
      _setTimeout(function () {
        window.ga(function () {
          var _context3;

          var resp = JSON.parse(opts.body);
          var sentEvents = resp.length;

          var sentEventHits = _filterInstanceProperty(_context3 = window.gaSpy.getHits()).call(_context3, function (hit) {
            return hit.eventCategory === 'split-event';
          });

          t.equal(sentEvents, 1, 'Number of events');
          t.equal(sentEvents, sentEventHits.length, "Number of sent event hits must be equal to sent events: (".concat(sentEvents, ")"));
          finish.next();
        });
      }, 10);

      return 200;
    });
    gaTag(); // siteSpeedSampleRate set to 0 to never send a site speed timing hit

    window.ga('create', 'UA-00000000-1', 'auto', {
      siteSpeedSampleRate: 0
    });
    gaSpy();
    window.ga('send', 'pageview');
    var factory = SplitFactory(config);
    client = factory.client();
    client.ready().then(function () {
      client.track('some_event');
      client.getTreatment('hierarchical_splits_test');
    });
  }); // test default behavior in multiple trackers, with multiple impressions, and GA in a different global variable

  assert.test(function (t) {
    var client;
    var numOfEvaluations = 4;
    fetchMock.postOnce(settings.url('/testImpressions/bulk'), function (url, opts) {
      _setTimeout(function () {
        window.other_location_for_ga(function () {
          var resp = JSON.parse(opts.body);
          var sentImpressions = countImpressions(resp);
          var sentHitsTracker1 = window.gaSpy.getHits('myTracker1');
          var sentHitsTracker2 = window.gaSpy.getHits('myTracker2');
          t.equal(sentImpressions, numOfEvaluations, 'Number of impressions equals the number of evaluations');
          t.equal(sentImpressions, sentHitsTracker1.length, 'Number of sent hits must be equal to the number of impressions');
          t.equal(sentImpressions, sentHitsTracker2.length, 'Number of sent hits must be equal to the number of impressions');

          _setTimeout(function () {
            client.destroy();
            t.end();
          });
        });
      });

      return 200;
    });
    gaTag('other_location_for_ga');
    window.other_location_for_ga('create', 'UA-00000000-1', 'auto', {
      siteSpeedSampleRate: 0
    });
    window.other_location_for_ga('create', 'UA-00000001-1', 'example1.com', 'myTracker1', {
      siteSpeedSampleRate: 0
    });
    window.other_location_for_ga('create', 'UA-00000002-1', 'example2.com', 'myTracker2', {
      siteSpeedSampleRate: 0
    });
    gaSpy(['myTracker1', 'myTracker2']);
    var factory = SplitFactory(_objectSpread({}, config, {
      core: _objectSpread({}, config.core, {
        authorizationKey: '<some-token-2>'
      }),
      integrations: [{
        type: 'SPLIT_TO_GOOGLE_ANALYTICS',
        trackerNames: ['myTracker1']
      }, {
        type: 'SPLIT_TO_GOOGLE_ANALYTICS',
        trackerNames: ['myTracker2']
      }]
    }));
    client = factory.client();
    client.ready().then(function () {
      for (var i = 0; i < numOfEvaluations; i++) {
        client.getTreatment('split_with_config');
      }
    });
  }); // test several SplitToGa integration items, with custom filter and mapper

  assert.test(function (t) {
    var client;
    var numOfEvaluations = 4;
    var numOfEvents = 3; // Generator to synchronize the call of t.end() when both impressions and events endpoints were invoked.

    var finish = /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      return _regeneratorRuntime.wrap(function _callee2$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return;

            case 2:
              _setTimeout(function () {
                client.destroy();
                t.end();
              });

            case 3:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee2);
    })();

    fetchMock.postOnce(settings.url('/testImpressions/bulk'), function (url, opts) {
      _setTimeout(function () {
        window.ga(function () {
          var _context5, _context6;

          var resp = JSON.parse(opts.body);
          var sentImpressions = countImpressions(resp);

          var sentImpressionHitsTracker3 = _filterInstanceProperty(_context5 = window.gaSpy.getHits('myTracker3')).call(_context5, function (hit) {
            return hit.eventCategory === 'split-impression';
          });

          var sentImpressionHitsTracker4 = _filterInstanceProperty(_context6 = window.gaSpy.getHits('myTracker4')).call(_context6, function (hit) {
            return hit.eventCategory === 'split-impression';
          });

          t.equal(sentImpressionHitsTracker3.length, sentImpressions, 'For tracker3, no impressions are filtered');
          t.equal(sentImpressionHitsTracker4.length, 0, 'For tracker4, all impressions are filtered');
          finish.next();
        });
      });

      return 200;
    });
    fetchMock.postOnce(settings.url('/events/bulk'), function (url, opts) {
      // @TODO review why it is not working with a delay of 0
      _setTimeout(function () {
        window.ga(function () {
          var _context7, _context8;

          var resp = JSON.parse(opts.body);
          var sentEvents = resp.length;

          var sentEventHitsTracker3 = _filterInstanceProperty(_context7 = window.gaSpy.getHits('myTracker3')).call(_context7, function (hit) {
            return hit.eventCategory === 'mycategory';
          });

          var sentEventHitsTracker4 = _filterInstanceProperty(_context8 = window.gaSpy.getHits('myTracker4')).call(_context8, function (hit) {
            return hit.eventCategory === 'mycategory';
          });

          t.equal(sentEventHitsTracker3.length, 0, 'For tracker3, all events are filtered');
          t.equal(sentEventHitsTracker4.length, sentEvents, 'For tracker4, no events are filtered');
          finish.next();
        });
      }, 10);

      return 200;
    });
    gaTag();
    window.ga('create', 'UA-00000003-1', 'example3.com', 'myTracker3', {
      siteSpeedSampleRate: 0
    });
    window.ga('create', 'UA-00000004-1', 'example4.com', 'myTracker4', {
      siteSpeedSampleRate: 0
    });
    gaSpy(['myTracker3', 'myTracker4']);

    var onlyImpressionsFilter = function onlyImpressionsFilter(_ref) {
      var type = _ref.type;
      return type === SPLIT_IMPRESSION;
    };

    var onlyEventsMapper = function onlyEventsMapper(_ref2) {
      var payload = _ref2.payload,
          type = _ref2.type;
      return type === SPLIT_EVENT ? {
        hitType: 'event',
        eventCategory: 'mycategory',
        eventAction: payload.eventTypeId
      } : undefined;
    };

    var factory = SplitFactory(_objectSpread({}, config, {
      core: _objectSpread({}, config.core, {
        authorizationKey: '<some-token-2>'
      }),
      scheduler: {
        impressionsRefreshRate: 0.2,
        eventsQueueSize: numOfEvents
      },
      integrations: [{
        type: 'SPLIT_TO_GOOGLE_ANALYTICS',
        trackerNames: ['myTracker3'],
        filter: onlyImpressionsFilter
      }, {
        type: 'SPLIT_TO_GOOGLE_ANALYTICS',
        trackerNames: ['myTracker4'],
        mapper: onlyEventsMapper
      }]
    }));
    client = factory.client();
    client.ready().then(function () {
      for (var i = 0; i < numOfEvaluations; i++) {
        client.getTreatment('split_with_config');
      }

      for (var _i = 0; _i < numOfEvents; _i++) {
        client.track('eventType');
      }
    });
  }); // exception in custom mapper or invalid mapper result must not send a hit

  assert.test(function (t) {
    var logSpy = sinon.spy(console, 'log');
    var error = 'some error';
    var client;
    var numOfEvaluations = 1;
    fetchMock.postOnce(settings.url('/testImpressions/bulk'), function (url, opts) {
      _setTimeout(function () {
        window.ga(function () {
          var resp = JSON.parse(opts.body);
          var sentImpressions = countImpressions(resp);
          var sentHitsDefault = window.gaSpy.getHits();
          var sentHitsTracker1 = window.gaSpy.getHits('myTracker1');
          var sentHitsTracker2 = window.gaSpy.getHits('myTracker2');
          t.equal(sentImpressions, numOfEvaluations, 'Number of impressions equals the number of evaluations');
          t.equal(sentHitsDefault.length, 0, 'No hits sent if custom mapper throws error');
          t.equal(sentHitsTracker1.length, 0, 'No hits sent if custom mapper returns invalid result');
          t.equal(sentHitsTracker2.length, numOfEvaluations, 'Number of sent hits must be equal to the number of impressions');

          _setTimeout(function () {
            t.ok(logSpy.calledWith("[WARN]  splitio-split-to-ga => SplitToGa queue method threw: ".concat(error, ". No hit was sent.")));
            t.ok(logSpy.calledWith('[WARN]  splitio-split-to-ga => your custom mapper returned an invalid FieldsObject instance. It must be an object with at least a `hitType` field.'));
            client.destroy();
            logSpy.restore();
            t.end();
          });
        });
      });

      return 200;
    });
    gaTag();
    window.ga('create', 'UA-00000000-1', 'auto', {
      siteSpeedSampleRate: 0
    });
    window.ga('create', 'UA-00000001-1', 'example1.com', 'myTracker1', {
      siteSpeedSampleRate: 0
    });
    window.ga('create', 'UA-00000002-1', 'example2.com', 'myTracker2', {
      siteSpeedSampleRate: 0
    });
    gaSpy(['t0', 'myTracker1', 'myTracker2']);
    var factory = SplitFactory(_objectSpread({}, config, {
      debug: true,
      integrations: [{
        type: 'SPLIT_TO_GOOGLE_ANALYTICS',
        mapper: function mapper() {
          throw error;
        }
      }, {
        type: 'SPLIT_TO_GOOGLE_ANALYTICS',
        trackerNames: ['myTracker1'],
        mapper: function mapper() {
          return {};
        }
      }, {
        type: 'SPLIT_TO_GOOGLE_ANALYTICS',
        trackerNames: ['myTracker2'],
        mapper: function mapper() {
          return {
            hitType: 'event',
            eventCategory: 'my-split-impression',
            eventAction: 'some-action'
          };
        }
      }]
    }));
    client = factory.client();
    client.ready().then(function () {
      for (var i = 0; i < numOfEvaluations; i++) {
        client.getTreatment('split_with_config');
      }
    });
  }); // Split ready before GA initialized

  assert.test(function (t) {
    var logSpy = sinon.spy(console, 'log');
    var client;
    var numOfEvaluations = 1;
    fetchMock.postOnce(settings.url('/testImpressions/bulk'), function (url, opts) {
      _setTimeout(function () {
        window.ga(function () {
          var resp = JSON.parse(opts.body);
          var sentImpressions = countImpressions(resp);
          var sentHitsDefault = window.gaSpy.getHits();
          t.equal(sentImpressions, numOfEvaluations, 'Number of impressions equals the number of evaluations');
          t.equal(sentHitsDefault.length, 0, 'No hits sent if ga initialized after Split');

          _setTimeout(function () {
            t.ok(logSpy.calledWith('[WARN]  splitio-split-to-ga => `ga` command queue not found. No hits will be sent.'));
            client.destroy();
            logSpy.restore();
            t.end();
          });
        });
      });

      return 200;
    });
    removeGaTag();
    var factory = SplitFactory(_objectSpread({}, config, {
      debug: true
    }));
    client = factory.client();
    client.ready().then(function () {
      for (var i = 0; i < numOfEvaluations; i++) {
        client.getTreatment('split_with_config');
      }
    });
    addGaTag();
    window.ga('create', 'UA-00000000-1', 'auto', {
      siteSpeedSampleRate: 0
    });
    gaSpy();
  }); // test `events` and `impressions` flags

  assert.test(function (t) {
    var client; // Generator to synchronize the call of t.end() when both impressions and events endpoints were invoked.

    var finish = /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
      return _regeneratorRuntime.wrap(function _callee3$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return;

            case 2:
              t.equal(window.gaSpy.getHits().length, 1, 'Total hits are 1: pageview');

              _setTimeout(function () {
                client.destroy();
                t.end();
              });

            case 4:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee3);
    })();

    fetchMock.postOnce(settings.url('/testImpressions/bulk'), function (url, opts) {
      // we can assert payload and ga hits, once ga is ready and after `SplitToGa.queue`, that is timeout wrapped, make to the queue stack.
      _setTimeout(function () {
        window.ga(function () {
          var _context10;

          var resp = JSON.parse(opts.body);
          var sentImpressions = countImpressions(resp);

          var sentImpressionHits = _filterInstanceProperty(_context10 = window.gaSpy.getHits()).call(_context10, function (hit) {
            return hit.eventCategory === 'split-impression';
          });

          t.equal(sentImpressions, 1, 'Number of impressions');
          t.equal(sentImpressionHits.length, 0, 'No hits associated to Split impressions must be sent');
          finish.next();
        });
      });

      return 200;
    });
    fetchMock.postOnce(settings.url('/events/bulk'), function (url, opts) {
      _setTimeout(function () {
        window.ga(function () {
          var _context11;

          var resp = JSON.parse(opts.body);
          var sentEvents = resp.length;

          var sentEventHits = _filterInstanceProperty(_context11 = window.gaSpy.getHits()).call(_context11, function (hit) {
            return hit.eventCategory === 'split-event';
          });

          t.equal(sentEvents, 1, 'Number of events');
          t.equal(sentEventHits.length, 0, 'No hits associated to Split events must be sent');
          finish.next();
        });
      });

      return 200;
    });
    gaTag();
    window.ga('create', 'UA-00000000-1', 'auto', {
      siteSpeedSampleRate: 0
    });
    gaSpy();
    window.ga('send', 'pageview');
    var factory = SplitFactory(_objectSpread({}, config, {
      integrations: [{
        type: 'SPLIT_TO_GOOGLE_ANALYTICS',
        events: false,
        impressions: false
      }]
    }));
    client = factory.client();
    client.ready().then(function () {
      client.track('some_event');
      client.getTreatment('hierarchical_splits_test');
    });
  });
}
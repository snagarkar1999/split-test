import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _classCallCheck from "@babel/runtime-corejs3/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime-corejs3/helpers/esm/inherits";
import { startsWith } from '../utils/lang';
import KeyBuilder from './Keys';
import { matching } from '../utils/key/factory';

var KeyBuilderForLocalStorage = /*#__PURE__*/function (_KeyBuilder) {
  _inherits(KeyBuilderForLocalStorage, _KeyBuilder);

  function KeyBuilderForLocalStorage() {
    _classCallCheck(this, KeyBuilderForLocalStorage);

    return _possibleConstructorReturn(this, _getPrototypeOf(KeyBuilderForLocalStorage).apply(this, arguments));
  }

  _createClass(KeyBuilderForLocalStorage, [{
    key: "buildSegmentNameKey",
    value: function buildSegmentNameKey(segmentName) {
      var _context, _context2;

      return _concatInstanceProperty(_context = _concatInstanceProperty(_context2 = "".concat(matching(this.settings.core.key), ".")).call(_context2, this.settings.storage.prefix, ".segment.")).call(_context, segmentName);
    }
  }, {
    key: "extractSegmentName",
    value: function extractSegmentName(builtSegmentKeyName) {
      var _context3;

      var prefix = _concatInstanceProperty(_context3 = "".concat(matching(this.settings.core.key), ".")).call(_context3, this.settings.storage.prefix, ".segment.");

      if (startsWith(builtSegmentKeyName, prefix)) return builtSegmentKeyName.substr(prefix.length);
    }
  }, {
    key: "buildSplitsWithSegmentCountKey",
    value: function buildSplitsWithSegmentCountKey() {
      return "".concat(this.settings.storage.prefix, ".splits.usingSegments");
    }
  }]);

  return KeyBuilderForLocalStorage;
}(KeyBuilder);

export default KeyBuilderForLocalStorage;
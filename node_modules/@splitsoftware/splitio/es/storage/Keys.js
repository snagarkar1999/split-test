import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _classCallCheck from "@babel/runtime-corejs3/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/esm/createClass";
import { startsWith } from '../utils/lang';
var everythingAtTheEnd = /[^.]+$/;
var everythingAfterCount = /count\.([^/]+)$/;
var latencyMetricNameAndBucket = /latency\.([^/]+)\.bucket\.([0-9]+)$/;

var KeyBuilder = /*#__PURE__*/function () {
  function KeyBuilder(settings) {
    _classCallCheck(this, KeyBuilder);

    this.settings = settings;
  }

  _createClass(KeyBuilder, [{
    key: "buildSplitKey",
    value: function buildSplitKey(splitName) {
      var _context;

      return _concatInstanceProperty(_context = "".concat(this.settings.storage.prefix, ".split.")).call(_context, splitName);
    }
  }, {
    key: "buildTrafficTypeKey",
    value: function buildTrafficTypeKey(trafficType) {
      var _context2;

      return _concatInstanceProperty(_context2 = "".concat(this.settings.storage.prefix, ".trafficType.")).call(_context2, trafficType);
    }
  }, {
    key: "buildSplitsTillKey",
    value: function buildSplitsTillKey() {
      return "".concat(this.settings.storage.prefix, ".splits.till");
    }
  }, {
    key: "buildSplitsReady",
    value: function buildSplitsReady() {
      return "".concat(this.settings.storage.prefix, ".splits.ready");
    }
  }, {
    key: "isSplitKey",
    value: function isSplitKey(key) {
      return startsWith(key, "".concat(this.settings.storage.prefix, ".split."));
    }
  }, {
    key: "buildSegmentNameKey",
    value: function buildSegmentNameKey(segmentName) {
      var _context3;

      return _concatInstanceProperty(_context3 = "".concat(this.settings.storage.prefix, ".segment.")).call(_context3, segmentName);
    }
  }, {
    key: "buildSegmentTillKey",
    value: function buildSegmentTillKey(segmentName) {
      var _context4;

      return _concatInstanceProperty(_context4 = "".concat(this.settings.storage.prefix, ".segment.")).call(_context4, segmentName, ".till");
    }
  }, {
    key: "buildRegisteredSegmentsKey",
    value: function buildRegisteredSegmentsKey() {
      return "".concat(this.settings.storage.prefix, ".segments.registered");
    }
  }, {
    key: "buildSegmentsReady",
    value: function buildSegmentsReady() {
      return "".concat(this.settings.storage.prefix, ".segments.ready");
    }
  }, {
    key: "buildVersionablePrefix",
    value: function buildVersionablePrefix() {
      var _context5, _context6;

      return _concatInstanceProperty(_context5 = _concatInstanceProperty(_context6 = "".concat(this.settings.storage.prefix, "/")).call(_context6, this.settings.version, "/")).call(_context5, this.settings.runtime.ip);
    }
  }, {
    key: "buildImpressionsKey",
    value: function buildImpressionsKey() {
      return "".concat(this.settings.storage.prefix, ".impressions");
    }
  }, {
    key: "buildEventsKey",
    value: function buildEventsKey() {
      return "".concat(this.settings.storage.prefix, ".events");
    }
  }, {
    key: "buildLatencyKeyPrefix",
    value: function buildLatencyKeyPrefix() {
      return "".concat(this.buildVersionablePrefix(), "/latency");
    }
  }, {
    key: "buildLatencyKey",
    value: function buildLatencyKey(metricName, bucketNumber) {
      var _context7, _context8;

      return _concatInstanceProperty(_context7 = _concatInstanceProperty(_context8 = "".concat(this.buildLatencyKeyPrefix(), ".")).call(_context8, metricName, ".bucket.")).call(_context7, bucketNumber);
    }
  }, {
    key: "buildCountKey",
    value: function buildCountKey(metricName) {
      var _context9;

      return _concatInstanceProperty(_context9 = "".concat(this.buildVersionablePrefix(), "/count.")).call(_context9, metricName);
    }
  }, {
    key: "buildGaugeKey",
    value: function buildGaugeKey(metricName) {
      var _context10;

      return _concatInstanceProperty(_context10 = "".concat(this.buildVersionablePrefix(), "/gauge.")).call(_context10, metricName);
    }
  }, {
    key: "searchPatternForCountKeys",
    value: function searchPatternForCountKeys() {
      return "".concat(this.buildVersionablePrefix(), "/count.*");
    }
  }, {
    key: "searchPatternForSplitKeys",
    value: function searchPatternForSplitKeys() {
      return "".concat(this.settings.storage.prefix, ".split.*");
    }
  }, {
    key: "searchPatternForLatency",
    value: function searchPatternForLatency() {
      return "".concat(this.buildLatencyKeyPrefix(), ".*");
    }
  }, {
    key: "extractKey",
    value: function extractKey(builtKey) {
      var s = builtKey.match(everythingAtTheEnd);

      if (s && s.length) {
        return s[0];
      } else {
        throw 'Invalid latency key provided';
      }
    }
  }, {
    key: "extractCounterName",
    value: function extractCounterName(counterKey) {
      var m = counterKey.match(everythingAfterCount);

      if (m && m.length) {
        return m[1]; // everything after count
      } else {
        throw 'Invalid counter key provided';
      }
    }
  }, {
    key: "extractLatencyMetricNameAndBucket",
    value: function extractLatencyMetricNameAndBucket(latencyKey) {
      var parts = latencyKey.match(latencyMetricNameAndBucket);

      if (parts && parts.length > 2) {
        return {
          metricName: parts[1],
          bucketNumber: parts[2]
        };
      } else {
        throw 'Invalid counter key provided';
      }
    }
  }]);

  return KeyBuilder;
}();

export default KeyBuilder;
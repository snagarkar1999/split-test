import _Number$isNaN from "@babel/runtime-corejs3/core-js-stable/number/is-nan";
import _parseInt from "@babel/runtime-corejs3/core-js-stable/parse-int";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _keysInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/keys";
import _classCallCheck from "@babel/runtime-corejs3/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/esm/createClass";

var SegmentCacheInRedis = /*#__PURE__*/function () {
  function SegmentCacheInRedis(keys, redis) {
    _classCallCheck(this, SegmentCacheInRedis);

    this.redis = redis;
    this.keys = keys;
  }

  _createClass(SegmentCacheInRedis, [{
    key: "addToSegment",
    value: function addToSegment(segmentName, segmentKeys) {
      var segmentKey = _keysInstanceProperty(this).buildSegmentNameKey(segmentName);

      if (segmentKeys.length) {
        return this.redis.sadd(segmentKey, segmentKeys).then(function () {
          return true;
        });
      } else {
        return _Promise.resolve(true);
      }
    }
  }, {
    key: "removeFromSegment",
    value: function removeFromSegment(segmentName, segmentKeys) {
      var segmentKey = _keysInstanceProperty(this).buildSegmentNameKey(segmentName);

      if (segmentKeys.length) {
        return this.redis.srem(segmentKey, segmentKeys).then(function () {
          return true;
        });
      } else {
        return _Promise.resolve(true);
      }
    }
  }, {
    key: "isInSegment",
    value: function isInSegment(segmentName, key) {
      return this.redis.sismember(_keysInstanceProperty(this).buildSegmentNameKey(segmentName), key).then(function (matches) {
        return matches !== 0;
      });
    }
  }, {
    key: "setChangeNumber",
    value: function setChangeNumber(segmentName, changeNumber) {
      return this.redis.set(_keysInstanceProperty(this).buildSegmentTillKey(segmentName), changeNumber + '').then(function (status) {
        return status === 'OK';
      });
    }
  }, {
    key: "getChangeNumber",
    value: function getChangeNumber(segmentName) {
      return this.redis.get(_keysInstanceProperty(this).buildSegmentTillKey(segmentName)).then(function (value) {
        var i = _parseInt(value, 10);

        return _Number$isNaN(i) ? -1 : i;
      });
    }
  }, {
    key: "registerSegment",
    value: function registerSegment(segment) {
      return this.registerSegments(segment);
    }
  }, {
    key: "registerSegments",
    value: function registerSegments(segments) {
      if (segments.length) {
        return this.redis.sadd(_keysInstanceProperty(this).buildRegisteredSegmentsKey(), segments).then(function () {
          return true;
        });
      } else {
        return _Promise.resolve(true);
      }
    }
  }, {
    key: "getRegisteredSegments",
    value: function getRegisteredSegments() {
      return this.redis.smembers(_keysInstanceProperty(this).buildRegisteredSegmentsKey());
    }
  }, {
    key: "flush",
    value: function flush() {
      return this.redis.flushdb().then(function (status) {
        return status === 'OK';
      });
    }
  }]);

  return SegmentCacheInRedis;
}();

export default SegmentCacheInRedis;
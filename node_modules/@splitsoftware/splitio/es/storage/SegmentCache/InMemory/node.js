import _Map from "@babel/runtime-corejs3/core-js-stable/map";
import _Number$isInteger from "@babel/runtime-corejs3/core-js-stable/number/is-integer";
import _keysInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/keys";
import _getIterator from "@babel/runtime-corejs3/core-js/get-iterator";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Set from "@babel/runtime-corejs3/core-js-stable/set";
import _classCallCheck from "@babel/runtime-corejs3/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/esm/createClass";

var SegmentCacheInMemory = /*#__PURE__*/function () {
  function SegmentCacheInMemory(keys) {
    _classCallCheck(this, SegmentCacheInMemory);

    this.keys = keys;
    this.flush();
  }

  _createClass(SegmentCacheInMemory, [{
    key: "addToSegment",
    value: function addToSegment(segmentName, segmentKeys) {
      var values = this.segmentCache.get(segmentName);
      var keySet = values ? values : new _Set();

      _forEachInstanceProperty(segmentKeys).call(segmentKeys, function (k) {
        return keySet.add(k);
      });

      this.segmentCache.set(segmentName, keySet);
      return true;
    }
  }, {
    key: "removeFromSegment",
    value: function removeFromSegment(segmentName, segmentKeys) {
      var values = this.segmentCache.get(segmentName);
      var keySet = values ? values : new _Set();

      _forEachInstanceProperty(segmentKeys).call(segmentKeys, function (k) {
        return keySet["delete"](k);
      });

      this.segmentCache.set(segmentName, keySet);
      return true;
    }
  }, {
    key: "isInSegment",
    value: function isInSegment(segmentName, key) {
      var segmentValues = this.segmentCache.get(segmentName);

      if (segmentValues) {
        return segmentValues.has(key);
      }

      return false;
    }
  }, {
    key: "registerSegment",
    value: function registerSegment(segmentName) {
      if (!this.segmentCache.has(segmentName)) {
        this.segmentCache.set(segmentName, new _Set());
      }

      return true;
    }
  }, {
    key: "registerSegments",
    value: function registerSegments(segments) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _getIterator(segments), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var segmentName = _step.value;
          this.registerSegment(segmentName);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return true;
    }
  }, {
    key: "getRegisteredSegments",
    value: function getRegisteredSegments() {
      var _context;

      return _keysInstanceProperty(_context = this.segmentCache).call(_context);
    }
  }, {
    key: "setChangeNumber",
    value: function setChangeNumber(segmentName, changeNumber) {
      var segmentChangeNumberKey = _keysInstanceProperty(this).buildSegmentTillKey(segmentName);

      this.segmentChangeNumber.set(segmentChangeNumberKey, changeNumber);
      return true;
    }
  }, {
    key: "getChangeNumber",
    value: function getChangeNumber(segmentName) {
      var segmentChangeNumberKey = _keysInstanceProperty(this).buildSegmentTillKey(segmentName);

      var value = this.segmentChangeNumber.get(segmentChangeNumberKey);
      return _Number$isInteger(value) ? value : -1;
    }
  }, {
    key: "flush",
    value: function flush() {
      this.segmentCache = new _Map();
      this.segmentChangeNumber = new _Map();
    }
  }]);

  return SegmentCacheInMemory;
}();

export default SegmentCacheInMemory;
import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _defineProperty from "@babel/runtime-corejs3/helpers/esm/defineProperty";
import _typeof from "@babel/runtime-corejs3/helpers/esm/typeof";

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context; _forEachInstanceProperty(_context = ownKeys(Object(source), true)).call(_context, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context2; _forEachInstanceProperty(_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

import sinon from 'sinon';
export function modelMock(fieldsObject) {
  return {
    get: function get(fieldName) {
      return fieldsObject[fieldName];
    },
    set: function set(fieldNameOrObject, fieldValue) {
      if (_typeof(fieldNameOrObject) === 'object') fieldsObject = _objectSpread({}, fieldsObject, {}, fieldNameOrObject);else fieldsObject[fieldNameOrObject] = fieldValue;
    }
  };
}
export function gaMock() {
  var __originalSendHitTask = sinon.spy();

  var __tasks = {
    sendHitTask: __originalSendHitTask
  };
  var ga = sinon.stub().callsFake(function (command) {
    if (command === 'send') {
      var fieldsObject = arguments[1];

      __tasks.sendHitTask(modelMock(fieldsObject));
    }
  });
  var set = sinon.fake(function (taskName, taskFunc) {
    __tasks[taskName] = taskFunc;
  });
  var get = sinon.fake(function (taskName) {
    return __tasks[taskName];
  }); // Add ga to window object

  if (typeof window === 'undefined') {
    if (global) global.window = {};
  }

  window['GoogleAnalyticsObject'] = 'ga';
  window['ga'] = window['ga'] || ga;
  return {
    ga: ga,
    tracker: {
      get: get,
      set: set,
      __originalSendHitTask: __originalSendHitTask
    }
  };
}
export function gaRemove() {
  if (typeof window !== 'undefined') window[window['GoogleAnalyticsObject'] || 'ga'] = undefined;
}
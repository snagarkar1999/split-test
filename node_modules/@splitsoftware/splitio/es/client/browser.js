import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _bindInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/bind";
import { get } from '../utils/lang';
import ClientWithInputValidationLayer from './inputValidation';
import { LOCALHOST_MODE } from '../utils/constants';
import { validateKey, validateTrafficType } from '../utils/inputValidation';

function BrowserClientFactory(context) {
  var _context, _context2, _context3, _context4, _context5, _bindInstanceProperty2, _context6;

  var settings = context.get(context.constants.SETTINGS);
  var maybeKey = get(settings, 'core.key', undefined);
  var maybeTT = get(settings, 'core.trafficType', undefined);

  if (settings.mode === LOCALHOST_MODE && maybeKey === undefined) {
    settings.core.key = 'localhost_key';
  } else {
    settings.core.key = validateKey(maybeKey, 'Client instantiation');
  } // Key is also binded to the .track method. Same thing happens with trafficType but only if present on configs. (not required)


  var trackBindings = [settings.core.key];

  if (maybeTT !== undefined) {
    var tt = validateTrafficType(maybeTT, 'Client instantiation');
    settings.core.trafficType = tt;
    trackBindings.push(tt);
  }

  var client = ClientWithInputValidationLayer(context, true, trackBindings.length > 1);
  client.isBrowserClient = true; // In the browser land, we can bind the key and the traffic type (if provided)

  client.getTreatment = _bindInstanceProperty(_context = client.getTreatment).call(_context, client, settings.core.key);
  client.getTreatmentWithConfig = _bindInstanceProperty(_context2 = client.getTreatmentWithConfig).call(_context2, client, settings.core.key);
  client.getTreatments = _bindInstanceProperty(_context3 = client.getTreatments).call(_context3, client, settings.core.key);
  client.getTreatmentsWithConfig = _bindInstanceProperty(_context4 = client.getTreatmentsWithConfig).call(_context4, client, settings.core.key);
  client.track = (_bindInstanceProperty2 = _bindInstanceProperty(_context5 = client.track)).call.apply(_bindInstanceProperty2, _concatInstanceProperty(_context6 = [_context5, client]).call(_context6, trackBindings));
  return client;
}

export default BrowserClientFactory;
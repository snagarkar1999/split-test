import _possibleConstructorReturn from "@babel/runtime-corejs3/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime-corejs3/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime-corejs3/helpers/esm/inherits";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _bindInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/bind";
import _classCallCheck from "@babel/runtime-corejs3/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/esm/createClass";

var ProducerMetricsCollector = /*#__PURE__*/function () {
  function ProducerMetricsCollector(storage) {
    var _context, _context2, _context3;

    _classCallCheck(this, ProducerMetricsCollector);

    this.storage = storage;
    this.latency = _bindInstanceProperty(_context = this.latency).call(_context, this);
    this.count = _bindInstanceProperty(_context2 = this.count).call(_context2, this);
    this.countException = _bindInstanceProperty(_context3 = this.countException).call(_context3, this);
  }

  _createClass(ProducerMetricsCollector, [{
    key: "latency",
    value: function latency(ms) {
      this.storage.metrics.track("".concat(this.metricType, ".time"), ms);
    }
  }, {
    key: "count",
    value: function count(status) {
      var _context4;

      this.storage.count.track(_concatInstanceProperty(_context4 = "".concat(this.metricType, ".status.")).call(_context4, status));
    }
  }, {
    key: "countException",
    value: function countException() {
      this.storage.count.track("".concat(this.metricType, ".exception"));
    }
  }]);

  return ProducerMetricsCollector;
}();

export var SegmentChangesCollector = /*#__PURE__*/function (_ProducerMetricsColle) {
  _inherits(SegmentChangesCollector, _ProducerMetricsColle);

  function SegmentChangesCollector(storage) {
    var _this;

    _classCallCheck(this, SegmentChangesCollector);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SegmentChangesCollector).call(this, storage));
    _this.metricType = 'segmentChangeFetcher';
    return _this;
  }

  return SegmentChangesCollector;
}(ProducerMetricsCollector);
export var SplitChangesCollector = /*#__PURE__*/function (_ProducerMetricsColle2) {
  _inherits(SplitChangesCollector, _ProducerMetricsColle2);

  function SplitChangesCollector(storage) {
    var _this2;

    _classCallCheck(this, SplitChangesCollector);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(SplitChangesCollector).call(this, storage));
    _this2.metricType = 'splitChangeFetcher';
    return _this2;
  }

  return SplitChangesCollector;
}(ProducerMetricsCollector);
export var MySegmentsCollector = /*#__PURE__*/function (_ProducerMetricsColle3) {
  _inherits(MySegmentsCollector, _ProducerMetricsColle3);

  function MySegmentsCollector(storage) {
    var _this3;

    _classCallCheck(this, MySegmentsCollector);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(MySegmentsCollector).call(this, storage));
    _this3.metricType = 'mySegmentsFetcher';
    return _this3;
  }

  return MySegmentsCollector;
}(ProducerMetricsCollector);
export var ClientCollector = /*#__PURE__*/function () {
  function ClientCollector(storage) {
    var _context5, _context6, _context7, _context8, _context9;

    _classCallCheck(this, ClientCollector);

    this.storage = storage;
    this.ready = _bindInstanceProperty(_context5 = this.ready).call(_context5, this);
    this.getTreatment = _bindInstanceProperty(_context6 = this.getTreatment).call(_context6, this);
    this.getTreatments = _bindInstanceProperty(_context7 = this.getTreatments).call(_context7, this);
    this.getTreatmentWithConfig = _bindInstanceProperty(_context8 = this.getTreatmentWithConfig).call(_context8, this);
    this.getTreatmentsWithConfig = _bindInstanceProperty(_context9 = this.getTreatmentsWithConfig).call(_context9, this);
  }

  _createClass(ClientCollector, [{
    key: "ready",
    value: function ready(ms) {
      this.storage.metrics.track('sdk.ready', ms);
    }
  }, {
    key: "getTreatment",
    value: function getTreatment(ms) {
      this.storage.metrics.track('sdk.getTreatment', ms);
    }
  }, {
    key: "getTreatments",
    value: function getTreatments(ms) {
      this.storage.metrics.track('sdk.getTreatments', ms);
    }
  }, {
    key: "getTreatmentWithConfig",
    value: function getTreatmentWithConfig(ms) {
      this.storage.metrics.track('sdk.getTreatmentWithConfig', ms);
    }
  }, {
    key: "getTreatmentsWithConfig",
    value: function getTreatmentsWithConfig(ms) {
      this.storage.metrics.track('sdk.getTreatmentsWithConfig', ms);
    }
  }]);

  return ClientCollector;
}();
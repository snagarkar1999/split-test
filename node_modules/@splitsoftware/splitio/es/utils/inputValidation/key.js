import _trimInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/trim";
import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import { isObject, isString, isFinite, toString } from '../lang';
import logFactory from '../logger';
var log = logFactory('');
var KEY_MAX_LENGTH = 250;

function validateKeyValue(maybeKey, method, type) {
  if (maybeKey == undefined) {
    var _context, _context2;

    // eslint-disable-line eqeqeq
    log.error(_concatInstanceProperty(_context = _concatInstanceProperty(_context2 = "".concat(method, ": you passed a null or undefined ")).call(_context2, type, ", ")).call(_context, type, " must be a non-empty string."));
  } else if (isFinite(maybeKey) || isString(maybeKey)) {
    if (isFinite(maybeKey)) {
      var _context3, _context4;

      log.warn(_concatInstanceProperty(_context3 = _concatInstanceProperty(_context4 = "".concat(method, ": ")).call(_context4, type, " \"")).call(_context3, maybeKey, "\" is not of type string, converting."));
      return toString(maybeKey);
    } // It's a string, start by trimming the value.


    maybeKey = _trimInstanceProperty(maybeKey).call(maybeKey); // It's aaaaaall good.

    if (maybeKey.length > 0 && maybeKey.length <= KEY_MAX_LENGTH) return maybeKey;

    if (maybeKey.length === 0) {
      var _context5;

      log.error(_concatInstanceProperty(_context5 = "".concat(method, ": you passed an empty string, ")).call(_context5, type, " must be a non-empty string."));
    } else if (maybeKey.length > KEY_MAX_LENGTH) {
      var _context6, _context7;

      log.error(_concatInstanceProperty(_context6 = _concatInstanceProperty(_context7 = "".concat(method, ": ")).call(_context7, type, " too long, ")).call(_context6, type, " must be 250 characters or less."));
    }
  } else {
    var _context8, _context9;

    log.error(_concatInstanceProperty(_context8 = _concatInstanceProperty(_context9 = "".concat(method, ": you passed an invalid ")).call(_context9, type, " type, ")).call(_context8, type, " must be a non-empty string."));
  }

  return false;
}

export function validateKey(maybeKey, method) {
  if (isObject(maybeKey)) {
    // Validate key object
    var matchingKey = validateKeyValue(maybeKey.matchingKey, method, 'matchingKey');
    var bucketingKey = validateKeyValue(maybeKey.bucketingKey, method, 'bucketingKey');
    if (matchingKey && bucketingKey) return {
      matchingKey: matchingKey,
      bucketingKey: bucketingKey
    };
    log.error("".concat(method, ": Key must be an object with bucketingKey and matchingKey with valid string properties."));
    return false;
  } else {
    return validateKeyValue(maybeKey, method, 'key');
  }
}
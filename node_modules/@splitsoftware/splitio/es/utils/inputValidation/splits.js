import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import { uniq } from '../lang';
import logFactory from '../logger';
import { validateSplit } from './split';
var log = logFactory('');
export function validateSplits(maybeSplits, method) {
  if (_Array$isArray(maybeSplits) && maybeSplits.length > 0) {
    var validatedArray = []; // Remove invalid values

    _forEachInstanceProperty(maybeSplits).call(maybeSplits, function (maybeSplit) {
      var splitName = validateSplit(maybeSplit);
      if (splitName) validatedArray.push(splitName);
    }); // Strip off duplicated values if we have valid split names then return


    if (validatedArray.length) return uniq(validatedArray);
  }

  log.error("".concat(method, ": split_names must be a non-empty array."));
  return false;
}
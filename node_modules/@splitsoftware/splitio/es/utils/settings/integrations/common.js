import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _includesInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/includes";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import logFactory from '../../../utils/logger';
import { isString } from '../../../utils/lang';
var log = logFactory('splitio-settings');
/**
 * This function validates `settings.integrations` object
 *
 * @param {Object} settings SDK settings object to validate
 * @param {Array<string>} validIntegrationTypes list of integration types to filter from `settings.integrations`
 *
 * @returns {Array} array of valid integration items. The array might be empty if `settings` object does not have valid integrations.
 */

var validateIntegrationsSettings = function validateIntegrationsSettings(settings) {
  var _context, _context2;

  var validIntegrationTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var integrations = settings.integrations; // If integrations is not an array or an empty array, we return undefined (no integrations).

  if (!_Array$isArray(integrations) || integrations.length === 0) return []; // We remove invalid integration items

  var validIntegrations = _filterInstanceProperty(integrations).call(integrations, function (integration) {
    return integration && isString(integration.type) && _includesInstanceProperty(validIntegrationTypes).call(validIntegrationTypes, integration.type);
  });

  var invalids = integrations.length - validIntegrations.length;
  if (invalids) log.warn(_concatInstanceProperty(_context = _concatInstanceProperty(_context2 = "".concat(invalids, " integration ")).call(_context2, invalids === 1 ? 'item' : 'items', " at settings ")).call(_context, invalids === 1 ? 'is' : 'are', " invalid: integration items must have a valid 'type' value"));
  return validIntegrations;
};

export default validateIntegrationsSettings;
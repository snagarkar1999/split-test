import _bindInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/bind";
import _classCallCheck from "@babel/runtime-corejs3/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/esm/createClass";
import Backoff from '../../utils/backoff';
/**
 * MySegmentUpdateWorker class
 */

var MySegmentUpdateWorker = /*#__PURE__*/function () {
  /**
   *
   * @param {Object} mySegmentsStorage
   * @param {Object} mySegmentsProducer
   */
  function MySegmentUpdateWorker(mySegmentsStorage, mySegmentsProducer) {
    var _context, _context2;

    _classCallCheck(this, MySegmentUpdateWorker);

    this.mySegmentsStorage = mySegmentsStorage;
    this.mySegmentsProducer = mySegmentsProducer;
    this.maxChangeNumber = 0; // keeps the maximum changeNumber among queued events

    this.segmentList = undefined; // keeps the segmentList (if included in payload) from the queued event with maximum changeNumber

    this.currentChangeNumber = -1; // @TODO: remove once `/mySegments` endpoint provides the changeNumber

    this.put = _bindInstanceProperty(_context = this.put).call(_context, this);
    this.__handleMySegmentUpdateCall = _bindInstanceProperty(_context2 = this.__handleMySegmentUpdateCall).call(_context2, this);
    this.backoff = new Backoff(this.__handleMySegmentUpdateCall);
  } // Private method
  // Preconditions: this.mySegmentsProducer.isSynchronizingMySegments === false
  // @TODO update this block similar to SplitUpdateWorker, once `/mySegments` endpoint provides the changeNumber


  _createClass(MySegmentUpdateWorker, [{
    key: "__handleMySegmentUpdateCall",
    value: function __handleMySegmentUpdateCall() {
      var _this = this;

      if (this.maxChangeNumber > this.currentChangeNumber) {
        this.handleNewEvent = false;
        var currentMaxChangeNumber = this.maxChangeNumber;
        this.mySegmentsProducer.synchronizeMySegments(this.segmentList).then(function (result) {
          if (result !== false) // @TODO remove when revamping producers. Currently `MySegmentsUpdater` is resolved with a "false" value if the fetch fails.
            _this.currentChangeNumber = Math.max(_this.currentChangeNumber, currentMaxChangeNumber); // use `currentMaxChangeNumber`, in case that `this.maxChangeNumber` was updated during fetch.

          if (_this.handleNewEvent) {
            _this.__handleMySegmentUpdateCall();
          } else {
            _this.backoff.scheduleCall();
          }
        });
      }
    }
    /**
     * Invoked by NotificationProcessor on MY_SEGMENTS_UPDATE event
     *
     * @param {number} changeNumber change number of the MY_SEGMENTS_UPDATE notification
     * @param {string[] | undefined} segmentList might be undefined
     */

  }, {
    key: "put",
    value: function put(changeNumber, segmentList) {
      // @TODO uncomment next line once `/mySegments` endpoint provides the changeNumber
      // const currentChangeNumber = this.mySegmentsStorage.getChangeNumber();
      if (changeNumber <= this.currentChangeNumber || changeNumber <= this.maxChangeNumber) return;
      this.maxChangeNumber = changeNumber;
      this.handleNewEvent = true;
      this.backoff.reset();
      this.segmentList = segmentList;
      if (this.mySegmentsProducer.isSynchronizingMySegments()) return;

      this.__handleMySegmentUpdateCall();
    }
  }]);

  return MySegmentUpdateWorker;
}();

export { MySegmentUpdateWorker as default };
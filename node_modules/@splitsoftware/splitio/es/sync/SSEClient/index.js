import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _mapInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/map";
import _bindInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/bind";
import _classCallCheck from "@babel/runtime-corejs3/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime-corejs3/helpers/esm/createClass";
import getEventSource from '../../services/getEventSource';
var VERSION = '1.1';
var CONTROL_CHANNEL_REGEX = /^control_/;

var SSEClient = /*#__PURE__*/function () {
  _createClass(SSEClient, null, [{
    key: "getInstance",

    /**
     * Returns a SSEClient instance, or undefined if EventSource is not available.
     * @param {*} settings Split settings used to get streaming URL
     */
    value: function getInstance(settings) {
      var EventSource = getEventSource();
      if (EventSource) return new SSEClient(EventSource, settings);
    } // Instance properties:
    //  streamingUrl: string
    //  EventSource: EventSource constructor
    //  connection: EventSource | undefined
    //  handler: EventHandler for open, close, error and messages events
    //  authToken: Object | undefined

  }]);

  function SSEClient(EventSource, settings) {
    var _context;

    _classCallCheck(this, SSEClient);

    this.EventSource = EventSource;
    this.streamingUrl = settings.url('/sse');
    this.reopen = _bindInstanceProperty(_context = this.reopen).call(_context, this);
  }

  _createClass(SSEClient, [{
    key: "setEventHandler",
    value: function setEventHandler(handler) {
      this.handler = handler;
    }
    /**
     * Open the connection with a given authToken
     *
     * @param {Object} authToken
     * @throws {TypeError} if `authToken` is undefined
     */

  }, {
    key: "open",
    value: function open(authToken) {
      var _context2, _context3, _context4, _context5;

      this.close(); // it closes connection if previously opened

      this.authToken = authToken;

      var channelsQueryParam = _mapInstanceProperty(_context2 = _Object$keys(authToken.channels)).call(_context2, function (channel) {
        var params = CONTROL_CHANNEL_REGEX.test(channel) ? '[?occupancy=metrics.publishers]' : '';
        return encodeURIComponent(params + channel);
      }).join(',');

      var url = _concatInstanceProperty(_context3 = _concatInstanceProperty(_context4 = _concatInstanceProperty(_context5 = "".concat(this.streamingUrl, "?channels=")).call(_context5, channelsQueryParam, "&accessToken=")).call(_context4, authToken.token, "&v=")).call(_context3, VERSION, "&heartbeats=true"); // same results using `&heartbeats=false`


      this.connection = new this.EventSource(url);

      if (this.handler) {
        // no need to check if SSEClient is used only by PushManager
        this.connection.onopen = this.handler.handleOpen;
        this.connection.onmessage = this.handler.handleMessage;
        this.connection.onerror = this.handler.handleError;
      }
    }
    /** Close connection  */

  }, {
    key: "close",
    value: function close() {
      if (this.connection) this.connection.close();
    }
    /**
     * Re-open the connection with the last given authToken.
     *
     * @throws {TypeError} if `open` has not been previously called with an authToken
     */

  }, {
    key: "reopen",
    value: function reopen() {
      this.open(this.authToken);
    }
  }]);

  return SSEClient;
}();

export { SSEClient as default };
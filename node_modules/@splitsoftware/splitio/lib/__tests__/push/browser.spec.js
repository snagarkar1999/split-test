"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _bind = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/bind"));

var _tapeCatch = _interopRequireDefault(require("tape-catch"));

var _fetchMock = _interopRequireDefault(require("../utils/fetchMock"));

var _pushInitializationNopush = require("../browserSuites/push-initialization-nopush.spec");

var _pushInitializationRetries = require("../browserSuites/push-initialization-retries.spec");

var _pushSynchronization = require("../browserSuites/push-synchronization.spec");

var _pushSynchronizationRetries = require("../browserSuites/push-synchronization-retries.spec");

var _pushFallbacking = require("../browserSuites/push-fallbacking.spec");

var _pushRefreshToken = require("../browserSuites/push-refresh-token.spec");

_fetchMock.default.config.overwriteRoutes = false;
(0, _tapeCatch.default)('## Browser JS - E2E CI Tests for PUSH ##', function (assert) {
  assert.test('E2E / PUSH initialization: auth with push disabled', (0, _bind.default)(_pushInitializationNopush.testAuthWithPushDisabled).call(_pushInitializationNopush.testAuthWithPushDisabled, null, _fetchMock.default));
  assert.test('E2E / PUSH initialization: auth with 401', (0, _bind.default)(_pushInitializationNopush.testAuthWith401).call(_pushInitializationNopush.testAuthWith401, null, _fetchMock.default));
  assert.test('E2E / PUSH initialization: fallback to polling if EventSource is not available', (0, _bind.default)(_pushInitializationNopush.testNoEventSource).call(_pushInitializationNopush.testNoEventSource, null, _fetchMock.default));
  assert.test('E2E / PUSH initialization: fallback to polling if EventSource is not available', (0, _bind.default)(_pushInitializationNopush.testNoBase64Support).call(_pushInitializationNopush.testNoBase64Support, null, _fetchMock.default));
  assert.test('E2E / PUSH initialization: auth failures and then success', (0, _bind.default)(_pushInitializationRetries.testAuthRetries).call(_pushInitializationRetries.testAuthRetries, null, _fetchMock.default));
  assert.test('E2E / PUSH initialization: SSE connection failures and then success', (0, _bind.default)(_pushInitializationRetries.testSSERetries).call(_pushInitializationRetries.testSSERetries, null, _fetchMock.default));
  assert.test('E2E / PUSH synchronization: happy paths', (0, _bind.default)(_pushSynchronization.testSynchronization).call(_pushSynchronization.testSynchronization, null, _fetchMock.default));
  assert.test('E2E / PUSH synchronization: retries', (0, _bind.default)(_pushSynchronizationRetries.testSynchronizationRetries).call(_pushSynchronizationRetries.testSynchronizationRetries, null, _fetchMock.default));
  assert.test('E2E / PUSH fallbacking', (0, _bind.default)(_pushFallbacking.testFallbacking).call(_pushFallbacking.testFallbacking, null, _fetchMock.default));
  assert.test('E2E / PUSH refresh token', (0, _bind.default)(_pushRefreshToken.testRefreshToken).call(_pushRefreshToken.testRefreshToken, null, _fetchMock.default));
  assert.end();
});
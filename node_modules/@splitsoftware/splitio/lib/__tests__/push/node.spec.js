"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs3/regenerator"));

var _bind = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/bind"));

require("regenerator-runtime/runtime");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/asyncToGenerator"));

var _tapeCatch = _interopRequireDefault(require("tape-catch"));

var _fetchMock = _interopRequireDefault(require("../utils/fetchMock"));

var _pushInitializationNopush = require("../nodeSuites/push-initialization-nopush.spec");

var _pushInitializationRetries = require("../nodeSuites/push-initialization-retries.spec");

var _pushSynchronization = require("../nodeSuites/push-synchronization.spec");

var _pushSynchronizationRetries = require("../nodeSuites/push-synchronization-retries.spec");

var _pushFallbacking = require("../nodeSuites/push-fallbacking.spec");

var _pushRefreshToken = require("../nodeSuites/push-refresh-token.spec");

_fetchMock.default.config.overwriteRoutes = false;
(0, _tapeCatch.default)('## Node JS - E2E CI Tests for PUSH ##', /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(assert) {
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            assert.test('E2E / PUSH initialization: auth with push disabled', (0, _bind.default)(_pushInitializationNopush.testAuthWithPushDisabled).call(_pushInitializationNopush.testAuthWithPushDisabled, null, _fetchMock.default));
            assert.test('E2E / PUSH initialization: auth with 401', (0, _bind.default)(_pushInitializationNopush.testAuthWith401).call(_pushInitializationNopush.testAuthWith401, null, _fetchMock.default));
            assert.test('E2E / PUSH initialization: fallback to polling if EventSource is not available', (0, _bind.default)(_pushInitializationNopush.testNoEventSource).call(_pushInitializationNopush.testNoEventSource, null, _fetchMock.default));
            assert.test('E2E / PUSH initialization: auth failures and then success', (0, _bind.default)(_pushInitializationRetries.testAuthRetries).call(_pushInitializationRetries.testAuthRetries, null, _fetchMock.default));
            assert.test('E2E / PUSH initialization: SSE connection failures and then success', (0, _bind.default)(_pushInitializationRetries.testSSERetries).call(_pushInitializationRetries.testSSERetries, null, _fetchMock.default));
            assert.test('E2E / PUSH synchronization: happy paths', (0, _bind.default)(_pushSynchronization.testSynchronization).call(_pushSynchronization.testSynchronization, null, _fetchMock.default));
            assert.test('E2E / PUSH synchronization: retries', (0, _bind.default)(_pushSynchronizationRetries.testSynchronizationRetries).call(_pushSynchronizationRetries.testSynchronizationRetries, null, _fetchMock.default));
            assert.test('E2E / PUSH fallbacking', (0, _bind.default)(_pushFallbacking.testFallbacking).call(_pushFallbacking.testFallbacking, null, _fetchMock.default));
            assert.test('E2E / PUSH refresh token', (0, _bind.default)(_pushRefreshToken.testRefreshToken).call(_pushRefreshToken.testRefreshToken, null, _fetchMock.default));
            assert.end();

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());
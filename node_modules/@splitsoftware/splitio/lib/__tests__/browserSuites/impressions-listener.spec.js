"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty2 = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty2(exports, "__esModule", {
  value: true
});

exports.default = _default;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/define-property"));

var _defineProperties = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/define-properties"));

var _getOwnPropertyDescriptors = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _getOwnPropertyDescriptor = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/filter"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));

var _defineProperty3 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));

var _setTimeout2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/set-timeout"));

var _sinon = _interopRequireDefault(require("sinon"));

var _ = require("../../");

var _settings = _interopRequireDefault(require("../../utils/settings"));

function ownKeys(object, enumerableOnly) { var keys = (0, _keys.default)(object); if (_getOwnPropertySymbols.default) { var symbols = (0, _getOwnPropertySymbols.default)(object); if (enumerableOnly) symbols = (0, _filter.default)(symbols).call(symbols, function (sym) { return (0, _getOwnPropertyDescriptor.default)(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context; (0, _forEach.default)(_context = ownKeys(Object(source), true)).call(_context, function (key) { (0, _defineProperty3.default)(target, key, source[key]); }); } else if (_getOwnPropertyDescriptors.default) { (0, _defineProperties.default)(target, (0, _getOwnPropertyDescriptors.default)(source)); } else { var _context2; (0, _forEach.default)(_context2 = ownKeys(Object(source))).call(_context2, function (key) { (0, _defineProperty2.default)(target, key, (0, _getOwnPropertyDescriptor.default)(source, key)); }); } } return target; }

var settings = (0, _settings.default)({
  core: {
    key: '<fake id>'
  }
});
var listener = {
  logImpression: _sinon.default.stub()
};
var config = {
  core: {
    authorizationKey: '<fake-token-3>',
    key: 'nicolas@split.io'
  },
  scheduler: {
    featuresRefreshRate: 1,
    segmentsRefreshRate: 1,
    metricsRefreshRate: 3000,
    impressionsRefreshRate: 3000
  },
  startup: {
    eventsFirstPushWindow: 3000
  },
  impressionListener: listener
};

function _default(assert) {
  var splitio = (0, _.SplitFactory)(config);
  var client = splitio.client();
  var client2 = splitio.client({
    matchingKey: 'marcio@split.io',
    bucketingKey: 'impr_bucketing_2'
  });
  var client3 = splitio.client('facundo@split.io');
  return client.ready().then(function () {
    var metaData = {
      ip: settings.runtime.ip,
      hostname: settings.runtime.hostname,
      sdkLanguageVersion: settings.version
    };
    var testAttrs = {
      is_test: true
    }; // Impression listener is shared across all client instances and does not get affected by configurations.

    client.getTreatment('hierarchical_splits_test');
    client2.getTreatment('qc_team');
    client2.getTreatmentWithConfig('qc_team'); // Validate that the impression is the same.

    client3.getTreatment('qc_team', testAttrs);
    (0, _setTimeout2.default)(function () {
      var secondImpression = {
        feature: 'qc_team',
        keyName: 'marcio@split.io',
        treatment: 'no',
        bucketingKey: 'impr_bucketing_2',
        label: 'default rule'
      };
      assert.equal(listener.logImpression.callCount, 4, 'Impression listener logImpression method should be called after we call client.getTreatment, once per each impression generated.');
      assert.true(listener.logImpression.getCall(0).calledWithMatch(_objectSpread({
        impression: {
          feature: 'hierarchical_splits_test',
          keyName: 'nicolas@split.io',
          treatment: 'on',
          bucketingKey: undefined,
          label: 'expected label'
        },
        attributes: undefined
      }, metaData)));
      assert.true(listener.logImpression.getCall(1).calledWithMatch(_objectSpread({
        impression: secondImpression,
        attributes: undefined
      }, metaData)));
      assert.true(listener.logImpression.getCall(2).calledWithMatch(_objectSpread({
        impression: secondImpression,
        attributes: undefined
      }, metaData)));
      assert.true(listener.logImpression.getCall(3).calledWithMatch(_objectSpread({
        impression: {
          feature: 'qc_team',
          keyName: 'facundo@split.io',
          treatment: 'no',
          bucketingKey: undefined,
          label: 'default rule'
        },
        attributes: testAttrs
      }, metaData)));
      client3.destroy();
      client2.destroy();
      client.destroy();
      assert.end();
    }, 0);
  });
}
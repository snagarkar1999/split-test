"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs3/regenerator"));

require("regenerator-runtime/runtime");

var _setTimeout2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/set-timeout"));

var _entries = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/entries"));

var _sinon = _interopRequireDefault(require("sinon"));

var _ = require("../../");

var _settings = _interopRequireDefault(require("../../utils/settings"));

var _splitchangesSince = _interopRequireDefault(require("../mocks/splitchanges.since.-1.json"));

var _mysegmentsFacundoSplitIo = _interopRequireDefault(require("../mocks/mysegments.facundo@split.io.json"));

var config = {
  core: {
    authorizationKey: '...',
    key: 'facundo@split.io'
  },
  urls: {
    sdk: 'https://sdk.baseurlbeacon',
    events: 'https://sdk.baseurlbeacon'
  }
};
var settings = (0, _settings.default)(config); // Spy calls to Beacon API method

var sendBeaconSpy = _sinon.default.spy(window.navigator, 'sendBeacon'); // util method to trigger 'unload' event


function triggerUnloadEvent() {
  var event = document.createEvent('HTMLEvents');
  event.initEvent('unload', true, true);
  event.eventName = 'unload';
  window.dispatchEvent(event);
}

var assertImpressionSent = function assertImpressionSent(assert, impression) {
  assert.equal(impression.testName, 'hierarchical_splits_test', 'Present impression should have the correct split name.');
  assert.equal(impression.keyImpressions[0].keyName, 'facundo@split.io', 'Present impression should have the correct key.');
  assert.equal(impression.keyImpressions[0].label, 'expected label', 'Present impression should have the correct label.');
  assert.equal(impression.keyImpressions[0].treatment, 'on', 'Present impression should have the correct treatment.');
};

var assertEventSent = function assertEventSent(assert, event) {
  assert.equal(event.key, 'facundo@split.io', 'Key should match received value.');
  assert.equal(event.eventTypeId, 'someEvent', 'EventTypeId should match received value.');
  assert.equal(event.trafficTypeName, 'sometraffictype', 'TrafficTypeName should match the binded value.');
};

var assertCallsToBeaconAPI = function assertCallsToBeaconAPI(assert) {
  assert.ok(sendBeaconSpy.calledTwice, 'sendBeacon should have been called twice'); // The first call is for flushing impressions

  var impressionsCallArgs = sendBeaconSpy.firstCall.args;
  assert.equal(impressionsCallArgs[0], settings.url('/testImpressions/beacon'), 'assert correct url');
  var parsedPayload = JSON.parse(impressionsCallArgs[1]);
  assert.equal(parsedPayload.token, '...', 'assert correct payload token');
  assert.equal(parsedPayload.sdk, settings.version, 'assert correct sdk version');
  assertImpressionSent(assert, (0, _entries.default)(parsedPayload)[0]); // The second call is for flushing events

  var eventsCallArgs = sendBeaconSpy.secondCall.args;
  assert.equal(eventsCallArgs[0], settings.url('/events/beacon'), 'assert correct url');
  parsedPayload = JSON.parse(eventsCallArgs[1]);
  assert.equal(parsedPayload.token, '...', 'assert correct payload token');
  assert.equal(parsedPayload.sdk, settings.version, 'assert correct sdk version');
  assertEventSent(assert, (0, _entries.default)(parsedPayload)[0]);
}; // This E2E test checks that Beacon API is not called when page unload is triggered and there are not events or impressions to send.


function beaconApiNotSendTest(fetchMock, assert) {
  // Mocking this specific route to make sure we only get the items we want to test from the handlers.
  fetchMock.get(settings.url('/splitChanges?since=-1'), {
    status: 200,
    body: _splitchangesSince.default
  });
  fetchMock.get(settings.url('/splitChanges?since=1457552620999'), {
    status: 200,
    body: {
      splits: [],
      since: 1457552620999,
      till: 1457552620999
    }
  });
  fetchMock.get(settings.url('/mySegments/facundo@split.io'), {
    status: 200,
    body: _mysegmentsFacundoSplitIo.default
  }); // Init and run Split client

  var splitio = (0, _.SplitFactory)(config);
  var client = splitio.client();
  client.on(client.Event.SDK_READY, function () {
    // trigger unload event, without tracked events and impressions
    triggerUnloadEvent(); // destroy the client and execute the next E2E test named beaconApiSendTest

    (0, _setTimeout2.default)(function () {
      assert.ok(sendBeaconSpy.notCalled, 'sendBeacon should not be called if there are not events and impressions to track');
      sendBeaconSpy.resetHistory();
      client.destroy().then(function () {
        beaconApiSendTest(fetchMock, assert);
      });
    }, 0);
  });
} // This E2E test checks that impressions and events are sent to backend via Beacon API when page unload is triggered.


function beaconApiSendTest(fetchMock, assert) {
  // Init and run Split client
  var splitio = (0, _.SplitFactory)(config);
  var client = splitio.client();
  client.on(client.Event.SDK_READY, function () {
    client.getTreatment('hierarchical_splits_test');
    client.track('sometraffictype', 'someEvent', 10); // trigger unload event inmmediatly, before scheduled push of events and impressions

    triggerUnloadEvent(); // queue the assertion of the Beacon requests, destroy the client and execute the next E2E test named fallbackTest

    (0, _setTimeout2.default)(function () {
      assertCallsToBeaconAPI(assert);
      sendBeaconSpy.resetHistory();
      client.destroy().then(function () {
        fallbackTest(fetchMock, assert);
      });
    }, 0);
  });
} // This E2E test checks that impressions and events are sent to backend via Axios when page unload is triggered and Beacon API is not available.


function fallbackTest(fetchMock, assert) {
  // destroy reference to Beacon API
  window.navigator.sendBeacon = null;
  var splitio = (0, _.SplitFactory)(config);
  var client = splitio.client(); // synchronize client destruction when both endpoints ('/testImpressions/bulk' and '/events/bulk') are called

  var finish = /*#__PURE__*/_regenerator.default.mark(function _callee() {
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return;

          case 2:
            // @TODO review why we must destroy client in a different event-loop cycle, compared to axios-mock-adapter
            (0, _setTimeout2.default)(function () {
              client.destroy().then(function () {
                assert.end();
              });
            }, 0);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })(); // Mock endpoints used by Axios


  fetchMock.postOnce(settings.url('/testImpressions/bulk'), function (url, opts) {
    var resp = JSON.parse(opts.body);
    assert.ok(opts, 'Fallback to /testImpressions/bulk');
    assertImpressionSent(assert, resp[0]);
    finish.next();
    return 200;
  });
  fetchMock.postOnce(settings.url('/events/bulk'), function (url, opts) {
    var resp = JSON.parse(opts.body);
    assert.ok(opts, 'Fallback to /events/bulk');
    assertEventSent(assert, resp[0]);
    finish.next();
    return 200;
  });
  client.on(client.Event.SDK_READY, function () {
    client.getTreatment('hierarchical_splits_test');
    client.track('sometraffictype', 'someEvent', 10); // trigger unload event inmmediatly, before scheduled push of events and impressions

    triggerUnloadEvent();
  });
}

var _default = beaconApiNotSendTest;
exports.default = _default;
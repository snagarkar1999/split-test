"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty2 = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty2(exports, "__esModule", {
  value: true
});

exports.default = _default;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/define-property"));

var _defineProperties = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/define-properties"));

var _getOwnPropertyDescriptors = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors"));

var _getOwnPropertyDescriptor = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));

var _defineProperty3 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/filter"));

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs3/regenerator"));

var _setTimeout2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/set-timeout"));

require("regenerator-runtime/runtime");

var _reduce = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/reduce"));

var _ = require("../..");

var _settings = _interopRequireDefault(require("../../utils/settings"));

var _gaTestUtils = require("./gaTestUtils");

var _includes = _interopRequireDefault(require("lodash/includes"));

function ownKeys(object, enumerableOnly) { var keys = (0, _keys.default)(object); if (_getOwnPropertySymbols.default) { var symbols = (0, _getOwnPropertySymbols.default)(object); if (enumerableOnly) symbols = (0, _filter.default)(symbols).call(symbols, function (sym) { return (0, _getOwnPropertyDescriptor.default)(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context5; (0, _forEach.default)(_context5 = ownKeys(Object(source), true)).call(_context5, function (key) { (0, _defineProperty3.default)(target, key, source[key]); }); } else if (_getOwnPropertyDescriptors.default) { (0, _defineProperties.default)(target, (0, _getOwnPropertyDescriptors.default)(source)); } else { var _context6; (0, _forEach.default)(_context6 = ownKeys(Object(source))).call(_context6, function (key) { (0, _defineProperty2.default)(target, key, (0, _getOwnPropertyDescriptor.default)(source, key)); }); } } return target; }

function countImpressions(parsedImpressionsBulkPayload) {
  return (0, _reduce.default)(parsedImpressionsBulkPayload).call(parsedImpressionsBulkPayload, function (accumulator, currentValue) {
    return accumulator + currentValue.keyImpressions.length;
  }, 0);
}

var config = {
  core: {
    key: 'facundo@split.io',
    trafficType: 'user'
  },
  integrations: [{
    type: 'GOOGLE_ANALYTICS_TO_SPLIT'
  }, {
    type: 'SPLIT_TO_GOOGLE_ANALYTICS'
  }]
};
var settings = (0, _settings.default)(config);

function _default(fetchMock, assert) {
  var client; // test default behavior of both integrations

  assert.test(function (t) {
    var customHits = [{
      hitType: 'pageview'
    }, {
      hitType: 'event'
    }];
    var splitTrackParams = [['some_event'], ['other_event'], ['another_event']];
    var splitGetTreatmentParams = [['hierarchical_splits_test']]; // Generator to synchronize the call of t.end() when both impressions and events endpoints were invoked.

    var finish = /*#__PURE__*/_regenerator.default.mark(function _callee() {
      var totalHits;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return;

            case 2:
              totalHits = customHits.length + splitTrackParams.length + splitGetTreatmentParams.length;
              t.equal(window.gaSpy.getHits().length, totalHits, 'Total hits');
              (0, _setTimeout2.default)(function () {
                client.destroy();
                t.end();
              }, 0);

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })();

    fetchMock.postOnce(settings.url('/testImpressions/bulk'), function (url, opts) {
      // we can assert payload and ga hits, once ga is ready and after `SplitToGa.queue`, that is timeout wrapped, make to the queue stack.
      window.ga(function () {
        (0, _setTimeout2.default)(function () {
          try {
            var _context2;

            var resp = JSON.parse(opts.body);
            var numberOfSentImpressions = countImpressions(resp);
            var sentImpressionHits = (0, _filter.default)(_context2 = window.gaSpy.getHits()).call(_context2, function (hit) {
              return hit.eventCategory === 'split-impression';
            });
            t.equal(numberOfSentImpressions, splitGetTreatmentParams.length, 'Number of impressions');
            t.equal(sentImpressionHits.length, splitGetTreatmentParams.length, "Number of sent impression hits must be equal to the number of impressions (".concat(splitGetTreatmentParams.length, ")"));
            finish.next();
          } catch (err) {
            console.error(err);
          }
        });
      });
      return 200;
    });
    fetchMock.postOnce(settings.url('/events/bulk'), function (url, opts) {
      window.ga(function () {
        (0, _setTimeout2.default)(function () {
          try {
            var _context3, _context4;

            var sentEvents = JSON.parse(opts.body);
            var sentEventsFromSplitToGa = (0, _filter.default)(sentEvents).call(sentEvents, function (event) {
              return event.properties && event.properties.eventCategory && (0, _includes.default)(event.properties.eventCategory, 'split');
            });
            t.equal(sentEvents.length, splitTrackParams.length + customHits.length, 'Number of sent events is equal to custom events plus hits tracked as events');
            t.equal(sentEventsFromSplitToGa.length, 0, 'GA hits comming from Split-to-GA integration must not be tracked again as Split events');
            var sentHitsNoSplitData = (0, _filter.default)(_context3 = window.gaSpy.getHits()).call(_context3, function (hit) {
              return !hit.eventCategory || !(0, _includes.default)(hit.eventCategory, 'split');
            });
            var sentHitsSplitEvents = (0, _filter.default)(_context4 = window.gaSpy.getHits()).call(_context4, function (hit) {
              return hit.eventCategory === 'split-event';
            });
            t.equal(sentHitsNoSplitData.length, customHits.length, 'Number of custom hits');
            t.equal(sentHitsSplitEvents.length, splitTrackParams.length, 'Number of Split event hits');
            finish.next();
          } catch (err) {
            console.error(err);
          }
        });
      });
      return 200;
    });
    (0, _gaTestUtils.gaTag)(); // siteSpeedSampleRate set to 0 to never send a site speed timing hit

    window.ga('create', 'UA-00000000-1', 'auto', {
      siteSpeedSampleRate: 0
    });
    (0, _gaTestUtils.gaSpy)();
    window.ga('require', 'splitTracker');
    (0, _forEach.default)(customHits).call(customHits, function (hit) {
      window.ga('send', hit);
    });
    var factory = (0, _.SplitFactory)(_objectSpread({}, config, {
      startup: {
        eventsFirstPushWindow: 0
      },
      scheduler: {
        impressionsRefreshRate: 1,
        // @TODO eventsPushRate is too high, but using eventsQueueSize don't let us assert `filterSplitToGaHits`
        eventsPushRate: 10 // eventsQueueSize: splitTrackParams.length + customHits.length,

      }
    }));
    client = factory.client();
    client.ready().then(function () {
      (0, _forEach.default)(splitTrackParams).call(splitTrackParams, function (trackParams) {
        client.track.apply(client, trackParams);
      });
      (0, _forEach.default)(splitGetTreatmentParams).call(splitGetTreatmentParams, function (getTreatmentParams) {
        client.getTreatment.apply(client, getTreatmentParams);
      });
    });
  });
}
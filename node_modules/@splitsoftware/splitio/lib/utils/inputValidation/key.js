"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.validateKey = validateKey;

var _trim = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/trim"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _lang = require("../lang");

var _logger = _interopRequireDefault(require("../logger"));

var log = (0, _logger.default)('');
var KEY_MAX_LENGTH = 250;

function validateKeyValue(maybeKey, method, type) {
  if (maybeKey == undefined) {
    var _context, _context2;

    // eslint-disable-line eqeqeq
    log.error((0, _concat.default)(_context = (0, _concat.default)(_context2 = "".concat(method, ": you passed a null or undefined ")).call(_context2, type, ", ")).call(_context, type, " must be a non-empty string."));
  } else if ((0, _lang.isFinite)(maybeKey) || (0, _lang.isString)(maybeKey)) {
    if ((0, _lang.isFinite)(maybeKey)) {
      var _context3, _context4;

      log.warn((0, _concat.default)(_context3 = (0, _concat.default)(_context4 = "".concat(method, ": ")).call(_context4, type, " \"")).call(_context3, maybeKey, "\" is not of type string, converting."));
      return (0, _lang.toString)(maybeKey);
    } // It's a string, start by trimming the value.


    maybeKey = (0, _trim.default)(maybeKey).call(maybeKey); // It's aaaaaall good.

    if (maybeKey.length > 0 && maybeKey.length <= KEY_MAX_LENGTH) return maybeKey;

    if (maybeKey.length === 0) {
      var _context5;

      log.error((0, _concat.default)(_context5 = "".concat(method, ": you passed an empty string, ")).call(_context5, type, " must be a non-empty string."));
    } else if (maybeKey.length > KEY_MAX_LENGTH) {
      var _context6, _context7;

      log.error((0, _concat.default)(_context6 = (0, _concat.default)(_context7 = "".concat(method, ": ")).call(_context7, type, " too long, ")).call(_context6, type, " must be 250 characters or less."));
    }
  } else {
    var _context8, _context9;

    log.error((0, _concat.default)(_context8 = (0, _concat.default)(_context9 = "".concat(method, ": you passed an invalid ")).call(_context9, type, " type, ")).call(_context8, type, " must be a non-empty string."));
  }

  return false;
}

function validateKey(maybeKey, method) {
  if ((0, _lang.isObject)(maybeKey)) {
    // Validate key object
    var matchingKey = validateKeyValue(maybeKey.matchingKey, method, 'matchingKey');
    var bucketingKey = validateKeyValue(maybeKey.bucketingKey, method, 'bucketingKey');
    if (matchingKey && bucketingKey) return {
      matchingKey: matchingKey,
      bucketingKey: bucketingKey
    };
    log.error("".concat(method, ": Key must be an object with bucketingKey and matchingKey with valid string properties."));
    return false;
  } else {
    return validateKeyValue(maybeKey, method, 'key');
  }
}
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _now = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/date/now"));

var _tape = _interopRequireDefault(require("tape"));

var _backoff = _interopRequireDefault(require("../../backoff"));

(0, _tape.default)('Backoff', function (assert) {
  var start = (0, _now.default)();
  var backoff;
  var alreadyReset = false;

  var callback = function callback() {
    var delta = (0, _now.default)() - start;
    start += delta;
    var expectedMillis = Math.min(backoff.baseMillis * Math.pow(2, backoff.attempts - 1), backoff.maxMillis);
    assert.true(delta > expectedMillis - 20 && delta < expectedMillis + 20, 'executes callback at expected time');

    if (backoff.attempts <= 3) {
      backoff.scheduleCall();
    } else {
      backoff.reset();
      assert.equal(backoff.attempts, 0, 'restarts attempts when `reset` called');
      assert.equal(backoff.timeoutID, 0, 'restarts timeoutId when `reset` called'); // init the schedule cycle or finish the test

      if (alreadyReset) {
        assert.end();
      } else {
        alreadyReset = true;
        backoff.scheduleCall();
      }
    }
  };

  backoff = new _backoff.default(callback);
  assert.equal(backoff.cb, callback, 'contains given callback');
  assert.equal(backoff.baseMillis, _backoff.default.DEFAULT_BASE_MILLIS, 'contains default baseMillis');
  assert.equal(backoff.maxMillis, _backoff.default.DEFAULT_MAX_MILLIS, 'contains default maxMillis');
  var CUSTOM_BASE = 200;
  var CUSTOM_MAX = 700;
  backoff = new _backoff.default(callback, CUSTOM_BASE, CUSTOM_MAX);
  assert.equal(backoff.baseMillis, CUSTOM_BASE, 'contains given baseMillis');
  assert.equal(backoff.maxMillis, CUSTOM_MAX, 'contains given maxMillis');
  assert.equal(backoff.scheduleCall(), backoff.baseMillis, 'scheduleCall returns the scheduled delay time');
});
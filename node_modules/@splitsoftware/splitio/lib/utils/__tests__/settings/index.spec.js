"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/define-property"));

var _defineProperties = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/define-properties"));

var _getOwnPropertyDescriptors = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors"));

var _getOwnPropertyDescriptor = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/filter"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _defineProperty3 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));

var _lodash = _interopRequireDefault(require("lodash"));

var _tapeCatch = _interopRequireDefault(require("tape-catch"));

var _settings = _interopRequireDefault(require("../../settings"));

function ownKeys(object, enumerableOnly) { var keys = (0, _keys.default)(object); if (_getOwnPropertySymbols.default) { var symbols = (0, _getOwnPropertySymbols.default)(object); if (enumerableOnly) symbols = (0, _filter.default)(symbols).call(symbols, function (sym) { return (0, _getOwnPropertyDescriptor.default)(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context7; (0, _forEach.default)(_context7 = ownKeys(Object(source), true)).call(_context7, function (key) { (0, _defineProperty3.default)(target, key, source[key]); }); } else if (_getOwnPropertyDescriptors.default) { (0, _defineProperties.default)(target, (0, _getOwnPropertyDescriptors.default)(source)); } else { var _context8; (0, _forEach.default)(_context8 = ownKeys(Object(source))).call(_context8, function (key) { (0, _defineProperty2.default)(target, key, (0, _getOwnPropertyDescriptor.default)(source, key)); }); } } return target; }

(0, _tapeCatch.default)('SETTINGS / check defaults', function (assert) {
  var settings = (0, _settings.default)({
    core: {
      authorizationKey: 'dummy token'
    }
  });
  assert.deepEqual(settings.urls, {
    sdk: 'https://sdk.split.io/api',
    events: 'https://events.split.io/api',
    auth: 'https://auth.split.io/api',
    streaming: 'https://streaming.split.io'
  });
  assert.end();
});
(0, _tapeCatch.default)('SETTINGS / key and traffic type should be overwritable', function (assert) {
  var settings = (0, _settings.default)({
    core: {
      authorizationKey: 'dummy token',
      key: 'start_key'
    }
  });
  assert.equal(settings.core.key, 'start_key', 'When creating a setting instance, it will have the provided value for key');
  assert.equal(settings.core.trafficType, undefined, 'and if no traffic type was provided, it will be undefined.');
  var settings2 = settings.overrideKeyAndTT('second_key');
  assert.notEqual(settings, settings2, 'If we call overrideKeyAndTT we get a new settings instance');
  assert.equal(settings2.core.key, 'second_key', 'with the key overriden by the value passed to it.');
  assert.equal(settings2.core.trafficType, undefined, 'As no traffic type was provided, it will still be undefined.');
  assert.deepEqual(_objectSpread({}, settings, {
    core: _objectSpread({}, settings.core, {
      key: 'second_key',
      trafficType: undefined
    })
  }), settings2, 'Of course, the new instance should match with the origin settings on every property but the overriden key.');
  var settings3 = settings.overrideKeyAndTT('third_key', 'myTT');
  assert.equal(settings3.core.key, 'third_key', 'If we call overrideKeyAndTT with both key and traffic type, new instance has key overriden as before');
  assert.equal(settings3.core.trafficType, 'myTT', 'and as we provided a traffic type, we have that traffic type now.');
  assert.deepEqual(_objectSpread({}, settings, {
    core: _objectSpread({}, settings.core, {
      key: 'third_key',
      trafficType: 'myTT'
    })
  }), settings3, 'Of course, the new instance should match with the origin settings on every property but the overriden key and trafficType.');
  var settings4 = settings3.overrideKeyAndTT('fourth_key');
  assert.equal(settings4.core.key, 'fourth_key', 'If we call overrideKeyAndTT with only key and NO traffic type, new instance has key overriden as before');
  assert.equal(settings4.core.trafficType, undefined, 'but traffic type should be blanked. (new key may be different tt)');
  assert.deepEqual(_objectSpread({}, settings3, {
    core: _objectSpread({}, settings3.core, {
      key: 'fourth_key',
      trafficType: undefined
    })
  }), settings4, 'Of course, the new instance should match with the origin settings on every property but the overriden key and trafficType.');
  assert.end();
});
(0, _tapeCatch.default)('SETTINGS / urls should be configurable', function (assert) {
  var urls = {
    sdk: 'sdk-url',
    events: 'events-url',
    auth: 'auth-url',
    streaming: 'streaming-url'
  };
  var settings = (0, _settings.default)({
    core: {
      authorizationKey: 'dummy token'
    },
    urls: urls
  });
  assert.deepEqual(settings.urls, urls);
  assert.end();
});
(0, _tapeCatch.default)('SETTINGS / required properties should be always present', function (assert) {
  var locatorAuthorizationKey = _lodash.default.property('core.authorizationKey');

  var locatorSchedulerFeaturesRefreshRate = _lodash.default.property('scheduler.featuresRefreshRate');

  var locatorSchedulerSegmentsRefreshRate = _lodash.default.property('scheduler.segmentsRefreshRate');

  var locatorSchedulerMetricsRefreshRate = _lodash.default.property('scheduler.metricsRefreshRate');

  var locatorSchedulerImpressionsRefreshRate = _lodash.default.property('scheduler.impressionsRefreshRate');

  var locatorUrlsSDK = _lodash.default.property('urls.sdk');

  var locatorUrlsEvents = _lodash.default.property('urls.events');

  var locatorStartupRequestTimeoutBeforeReady = _lodash.default.property('startup.requestTimeoutBeforeReady');

  var locatorStartupRetriesOnFailureBeforeReady = _lodash.default.property('startup.retriesOnFailureBeforeReady');

  var locatorStartupReadyTimeout = _lodash.default.property('startup.readyTimeout');

  var settings = (0, _settings.default)({
    core: {
      authorizationKey: 'dummy token'
    },
    scheduler: {
      featuresRefreshRate: undefined,
      segmentsRefreshRate: undefined,
      metricsRefreshRate: undefined,
      impressionsRefreshRate: undefined
    },
    urls: {
      sdk: undefined,
      events: undefined
    },
    startup: {
      requestTimeoutBeforeReady: undefined,
      retriesOnFailureBeforeReady: undefined,
      readyTimeout: undefined
    }
  });
  assert.ok(locatorAuthorizationKey(settings) !== undefined, 'authorizationKey should be present');
  assert.ok(locatorSchedulerFeaturesRefreshRate(settings) !== undefined, 'scheduler.featuresRefreshRate should be present');
  assert.ok(locatorSchedulerSegmentsRefreshRate(settings) !== undefined, 'scheduler.segmentsRefreshRate should be present');
  assert.equal(locatorSchedulerMetricsRefreshRate(settings), 120 * 1000, 'scheduler.metricsRefreshRate should be present');
  assert.ok(locatorSchedulerImpressionsRefreshRate(settings) !== undefined, 'scheduler.impressionsRefreshRate should be present');
  assert.ok(locatorUrlsSDK(settings) !== undefined, 'urls.sdk should be present');
  assert.ok(locatorUrlsEvents(settings) !== undefined, 'urls.events should be present');
  assert.ok(locatorStartupRequestTimeoutBeforeReady(settings) !== undefined, 'startup.requestTimeoutBeforeReady should be present');
  assert.ok(locatorStartupRetriesOnFailureBeforeReady(settings) !== undefined, 'startup.retriesOnFailureBeforeReady should be present');
  assert.ok(locatorStartupReadyTimeout(settings) !== undefined, 'startup.readyTimeout should be present');
  assert.end();
});
(0, _tapeCatch.default)('SETTINGS / urls should be correctly assigned', function (assert) {
  var _context, _context4;

  var settings = (0, _settings.default)({
    core: {
      authorizationKey: 'dummy token'
    }
  });
  var baseSdkUrl = 'https://sdk.split.io/api';
  var baseEventsUrl = 'https://events.split.io/api';
  (0, _forEach.default)(_context = ['/mySegments/nico', '/mySegments/events@split', '/mySegments/metrics@split', '/mySegments/testImpressions@split', '/mySegments/testImpressions', '/mySegments/events', '/mySegments/metrics', '/splitChanges?since=-1', '/splitChanges?since=100', '/segmentChanges/segment1?since=100', '/segmentChanges/events?since=100', '/segmentChanges/beacon?since=100', '/segmentChanges/metrics?since=100', '/segmentChanges/testImpressions?since=100']).call(_context, function (relativeUrl) {
    var _context2, _context3;

    assert.equal(settings.url(relativeUrl), (0, _concat.default)(_context2 = "".concat(baseSdkUrl)).call(_context2, relativeUrl), (0, _concat.default)(_context3 = "Our settings URL function should use ".concat(baseSdkUrl, " as base for ")).call(_context3, relativeUrl));
  });
  (0, _forEach.default)(_context4 = ['/metrics/times', '/metrics/counters', '/events/bulk', '/events/beacon', '/testImpressions/bulk', '/testImpressions/beacon']).call(_context4, function (relativeUrl) {
    var _context5, _context6;

    assert.equal(settings.url(relativeUrl), (0, _concat.default)(_context5 = "".concat(baseEventsUrl)).call(_context5, relativeUrl), (0, _concat.default)(_context6 = "Our settings URL function should use ".concat(baseEventsUrl, " as base for ")).call(_context6, relativeUrl));
  });
  assert.end();
});
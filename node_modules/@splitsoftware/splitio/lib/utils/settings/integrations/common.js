"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/includes"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/filter"));

var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/is-array"));

var _logger = _interopRequireDefault(require("../../../utils/logger"));

var _lang = require("../../../utils/lang");

var log = (0, _logger.default)('splitio-settings');
/**
 * This function validates `settings.integrations` object
 *
 * @param {Object} settings SDK settings object to validate
 * @param {Array<string>} validIntegrationTypes list of integration types to filter from `settings.integrations`
 *
 * @returns {Array} array of valid integration items. The array might be empty if `settings` object does not have valid integrations.
 */

var validateIntegrationsSettings = function validateIntegrationsSettings(settings) {
  var _context, _context2;

  var validIntegrationTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var integrations = settings.integrations; // If integrations is not an array or an empty array, we return undefined (no integrations).

  if (!(0, _isArray.default)(integrations) || integrations.length === 0) return []; // We remove invalid integration items

  var validIntegrations = (0, _filter.default)(integrations).call(integrations, function (integration) {
    return integration && (0, _lang.isString)(integration.type) && (0, _includes.default)(validIntegrationTypes).call(validIntegrationTypes, integration.type);
  });
  var invalids = integrations.length - validIntegrations.length;
  if (invalids) log.warn((0, _concat.default)(_context = (0, _concat.default)(_context2 = "".concat(invalids, " integration ")).call(_context2, invalids === 1 ? 'item' : 'items', " at settings ")).call(_context, invalids === 1 ? 'is' : 'are', " invalid: integration items must have a valid 'type' value"));
  return validIntegrations;
};

var _default = validateIntegrationsSettings;
exports.default = _default;
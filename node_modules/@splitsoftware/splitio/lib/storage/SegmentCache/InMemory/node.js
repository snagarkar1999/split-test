"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/web.dom-collections.iterator");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/map"));

var _isInteger = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/number/is-integer"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/keys"));

var _getIterator2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/get-iterator"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _set = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/set"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/createClass"));

var SegmentCacheInMemory = /*#__PURE__*/function () {
  function SegmentCacheInMemory(keys) {
    (0, _classCallCheck2.default)(this, SegmentCacheInMemory);
    this.keys = keys;
    this.flush();
  }

  (0, _createClass2.default)(SegmentCacheInMemory, [{
    key: "addToSegment",
    value: function addToSegment(segmentName, segmentKeys) {
      var values = this.segmentCache.get(segmentName);
      var keySet = values ? values : new _set.default();
      (0, _forEach.default)(segmentKeys).call(segmentKeys, function (k) {
        return keySet.add(k);
      });
      this.segmentCache.set(segmentName, keySet);
      return true;
    }
  }, {
    key: "removeFromSegment",
    value: function removeFromSegment(segmentName, segmentKeys) {
      var values = this.segmentCache.get(segmentName);
      var keySet = values ? values : new _set.default();
      (0, _forEach.default)(segmentKeys).call(segmentKeys, function (k) {
        return keySet.delete(k);
      });
      this.segmentCache.set(segmentName, keySet);
      return true;
    }
  }, {
    key: "isInSegment",
    value: function isInSegment(segmentName, key) {
      var segmentValues = this.segmentCache.get(segmentName);

      if (segmentValues) {
        return segmentValues.has(key);
      }

      return false;
    }
  }, {
    key: "registerSegment",
    value: function registerSegment(segmentName) {
      if (!this.segmentCache.has(segmentName)) {
        this.segmentCache.set(segmentName, new _set.default());
      }

      return true;
    }
  }, {
    key: "registerSegments",
    value: function registerSegments(segments) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (0, _getIterator2.default)(segments), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var segmentName = _step.value;
          this.registerSegment(segmentName);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return true;
    }
  }, {
    key: "getRegisteredSegments",
    value: function getRegisteredSegments() {
      var _context;

      return (0, _keys.default)(_context = this.segmentCache).call(_context);
    }
  }, {
    key: "setChangeNumber",
    value: function setChangeNumber(segmentName, changeNumber) {
      var segmentChangeNumberKey = (0, _keys.default)(this).buildSegmentTillKey(segmentName);
      this.segmentChangeNumber.set(segmentChangeNumberKey, changeNumber);
      return true;
    }
  }, {
    key: "getChangeNumber",
    value: function getChangeNumber(segmentName) {
      var segmentChangeNumberKey = (0, _keys.default)(this).buildSegmentTillKey(segmentName);
      var value = this.segmentChangeNumber.get(segmentChangeNumberKey);
      return (0, _isInteger.default)(value) ? value : -1;
    }
  }, {
    key: "flush",
    value: function flush() {
      this.segmentCache = new _map.default();
      this.segmentChangeNumber = new _map.default();
    }
  }]);
  return SegmentCacheInMemory;
}();

var _default = SegmentCacheInMemory;
exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/web.dom-collections.iterator");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _isNan = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/number/is-nan"));

var _parseInt2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/parse-int"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/promise"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/keys"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/createClass"));

var SegmentCacheInRedis = /*#__PURE__*/function () {
  function SegmentCacheInRedis(keys, redis) {
    (0, _classCallCheck2.default)(this, SegmentCacheInRedis);
    this.redis = redis;
    this.keys = keys;
  }

  (0, _createClass2.default)(SegmentCacheInRedis, [{
    key: "addToSegment",
    value: function addToSegment(segmentName, segmentKeys) {
      var segmentKey = (0, _keys.default)(this).buildSegmentNameKey(segmentName);

      if (segmentKeys.length) {
        return this.redis.sadd(segmentKey, segmentKeys).then(function () {
          return true;
        });
      } else {
        return _promise.default.resolve(true);
      }
    }
  }, {
    key: "removeFromSegment",
    value: function removeFromSegment(segmentName, segmentKeys) {
      var segmentKey = (0, _keys.default)(this).buildSegmentNameKey(segmentName);

      if (segmentKeys.length) {
        return this.redis.srem(segmentKey, segmentKeys).then(function () {
          return true;
        });
      } else {
        return _promise.default.resolve(true);
      }
    }
  }, {
    key: "isInSegment",
    value: function isInSegment(segmentName, key) {
      return this.redis.sismember((0, _keys.default)(this).buildSegmentNameKey(segmentName), key).then(function (matches) {
        return matches !== 0;
      });
    }
  }, {
    key: "setChangeNumber",
    value: function setChangeNumber(segmentName, changeNumber) {
      return this.redis.set((0, _keys.default)(this).buildSegmentTillKey(segmentName), changeNumber + '').then(function (status) {
        return status === 'OK';
      });
    }
  }, {
    key: "getChangeNumber",
    value: function getChangeNumber(segmentName) {
      return this.redis.get((0, _keys.default)(this).buildSegmentTillKey(segmentName)).then(function (value) {
        var i = (0, _parseInt2.default)(value, 10);
        return (0, _isNan.default)(i) ? -1 : i;
      });
    }
  }, {
    key: "registerSegment",
    value: function registerSegment(segment) {
      return this.registerSegments(segment);
    }
  }, {
    key: "registerSegments",
    value: function registerSegments(segments) {
      if (segments.length) {
        return this.redis.sadd((0, _keys.default)(this).buildRegisteredSegmentsKey(), segments).then(function () {
          return true;
        });
      } else {
        return _promise.default.resolve(true);
      }
    }
  }, {
    key: "getRegisteredSegments",
    value: function getRegisteredSegments() {
      return this.redis.smembers((0, _keys.default)(this).buildRegisteredSegmentsKey());
    }
  }, {
    key: "flush",
    value: function flush() {
      return this.redis.flushdb().then(function (status) {
        return status === 'OK';
      });
    }
  }]);
  return SegmentCacheInRedis;
}();

var _default = SegmentCacheInRedis;
exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _tapeCatch = _interopRequireDefault(require("tape-catch"));

var _Keys = _interopRequireDefault(require("../Keys"));

var _settings = _interopRequireDefault(require("../../utils/settings"));

(0, _tapeCatch.default)('KEYS / splits keys', function (assert) {
  var settings = (0, _settings.default)({
    core: {
      key: 'prevent-browser-testing-throw-exception-because-missing-key'
    }
  });
  var builder = new _Keys.default(settings);
  var splitName = 'split_name__for_testing';
  var expectedKey = "SPLITIO.split.".concat(splitName);
  var expectedTill = 'SPLITIO.splits.till';
  var expectedReady = 'SPLITIO.splits.ready';
  assert.true(builder.isSplitKey(expectedKey));
  assert.true(builder.buildSplitKey(splitName) === expectedKey);
  assert.true(builder.buildSplitsTillKey() === expectedTill);
  assert.true(builder.buildSplitsReady() === expectedReady);
  assert.true(builder.extractKey(builder.buildSplitKey(splitName)) === splitName);
  assert.end();
});
(0, _tapeCatch.default)('KEYS / splits keys with custom prefix', function (assert) {
  var _context;

  var prefix = 'js:1234:asd';
  var settings = (0, _settings.default)({
    core: {
      key: 'prevent-browser-testing-throw-exception-because-missing-key'
    },
    storage: {
      prefix: prefix
    }
  });
  var builder = new _Keys.default(settings);
  var splitName = 'split_name__for_testing';
  var expectedKey = (0, _concat.default)(_context = "".concat(prefix, ".SPLITIO.split.")).call(_context, splitName);
  var expectedTill = "".concat(prefix, ".SPLITIO.splits.till");
  var expectedReady = "".concat(prefix, ".SPLITIO.splits.ready");
  assert.true(builder.isSplitKey(expectedKey));
  assert.equals(builder.buildSplitKey(splitName), expectedKey);
  assert.true(builder.buildSplitsTillKey() === expectedTill);
  assert.true(builder.buildSplitsReady() === expectedReady);
  assert.end();
});
(0, _tapeCatch.default)('KEYS / segments keys', function (assert) {
  var settings = (0, _settings.default)({
    core: {
      key: 'prevent-browser-testing-throw-exception-because-missing-key'
    }
  });
  var builder = new _Keys.default(settings);
  var segmentName = 'segment_name__for_testing';
  var expectedKey = "SPLITIO.segment.".concat(segmentName);
  var expectedTill = "SPLITIO.segment.".concat(segmentName, ".till");
  var expectedReady = 'SPLITIO.segments.ready';
  var expectedSegmentRegistered = 'SPLITIO.segments.registered';
  assert.true(builder.buildSegmentNameKey(segmentName) === expectedKey);
  assert.true(builder.buildSegmentTillKey(segmentName) === expectedTill);
  assert.true(builder.buildSegmentsReady() === expectedReady);
  assert.true(builder.buildRegisteredSegmentsKey() === expectedSegmentRegistered);
  assert.end();
});
(0, _tapeCatch.default)('KEYS / traffic type keys', function (assert) {
  var _context2;

  var prefix = 'unit_test';
  var settings = (0, _settings.default)({
    core: {
      key: 'prevent-browser-testing-throw-exception-because-missing-key'
    },
    storage: {
      prefix: prefix
    }
  });
  var builder = new _Keys.default(settings);
  var ttName = 'test_trafficType';
  var expectedKey = (0, _concat.default)(_context2 = "".concat(prefix, ".SPLITIO.trafficType.")).call(_context2, ttName);
  assert.equal(builder.buildTrafficTypeKey(ttName), expectedKey);
  assert.end();
});
(0, _tapeCatch.default)('KEYS / impressions', function (assert) {
  var prefix = 'SPLITIO';
  var settings = (0, _settings.default)({
    core: {
      key: 'prevent-browser-testing-throw-exception-because-missing-key'
    },
    storage: {
      prefix: prefix
    }
  }); // Override default detected key.

  settings.runtime = {
    ip: '10-10-10-10'
  }; // Override version

  settings.version = 'js-1234';
  var builder = new _Keys.default(settings);
  var splitName = 'split_name__for_testing';
  var expectedImpressionKey = "".concat(prefix, ".SPLITIO.impressions");
  assert.true(builder.buildImpressionsKey(splitName) === expectedImpressionKey);
  assert.end();
});
(0, _tapeCatch.default)('KEYS / events', function (assert) {
  var fakeSettings1 = {
    storage: {
      prefix: 'test-prefix-1'
    }
  };
  var fakeSettings2 = {
    storage: {
      prefix: 'testPrefix2'
    }
  };
  var builder = new _Keys.default(fakeSettings1);
  assert.equal(builder.buildEventsKey(), 'test-prefix-1.events', 'Events key should only vary because of the storage prefix and return the same value on multiple invocations.');
  assert.equal(builder.buildEventsKey(), 'test-prefix-1.events', 'Events key should only vary because of the storage prefix and return the same value on multiple invocations.');
  builder = new _Keys.default(fakeSettings2);
  assert.equal(builder.buildEventsKey(), 'testPrefix2.events', 'Events key should only vary because of the storage prefix and return the same value on multiple invocations.');
  assert.equal(builder.buildEventsKey(), 'testPrefix2.events', 'Events key should only vary because of the storage prefix and return the same value on multiple invocations.');
  assert.end();
});
(0, _tapeCatch.default)('KEYS / latency keys', function (assert) {
  var _context3, _context4, _context5, _context6;

  var prefix = 'SPLITIO';
  var settings = (0, _settings.default)({
    core: {
      key: 'prevent-browser-testing-throw-exception-because-missing-key'
    },
    storage: {
      prefix: prefix
    }
  }); // Override default detected key.

  settings.runtime = {
    ip: '10-10-10-10'
  }; // Override version

  settings.version = 'js-1234';
  var builder = new _Keys.default(settings);
  var metricName = 'unit testing metric name';
  var bucketNumber = '10';
  var expectedLatencyKey = (0, _concat.default)(_context3 = (0, _concat.default)(_context4 = (0, _concat.default)(_context5 = (0, _concat.default)(_context6 = "".concat(prefix, ".SPLITIO/")).call(_context6, settings.version, "/")).call(_context5, settings.runtime.ip, "/latency.")).call(_context4, metricName, ".bucket.")).call(_context3, bucketNumber);
  assert.true(builder.buildLatencyKey(metricName, bucketNumber) === expectedLatencyKey);
  var metricNameAndBucket = builder.extractLatencyMetricNameAndBucket(expectedLatencyKey);
  assert.true(builder.buildLatencyKey(metricName, bucketNumber) === expectedLatencyKey);
  assert.true(metricName === metricNameAndBucket.metricName);
  assert.true(bucketNumber === metricNameAndBucket.bucketNumber);
  assert.end();
});
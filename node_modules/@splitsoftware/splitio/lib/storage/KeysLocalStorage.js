"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _startsWithInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/starts-with");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/inherits"));

var _lang = require("../utils/lang");

var _Keys = _interopRequireDefault(require("./Keys"));

var _factory = require("../utils/key/factory");

var KeyBuilderForLocalStorage = /*#__PURE__*/function (_KeyBuilder) {
  (0, _inherits2.default)(KeyBuilderForLocalStorage, _KeyBuilder);

  function KeyBuilderForLocalStorage() {
    (0, _classCallCheck2.default)(this, KeyBuilderForLocalStorage);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(KeyBuilderForLocalStorage).apply(this, arguments));
  }

  (0, _createClass2.default)(KeyBuilderForLocalStorage, [{
    key: "buildSegmentNameKey",
    value: function buildSegmentNameKey(segmentName) {
      var _context, _context2;

      return (0, _concat.default)(_context = (0, _concat.default)(_context2 = "".concat((0, _factory.matching)(this.settings.core.key), ".")).call(_context2, this.settings.storage.prefix, ".segment.")).call(_context, segmentName);
    }
  }, {
    key: "extractSegmentName",
    value: function extractSegmentName(builtSegmentKeyName) {
      var _context3;

      var prefix = (0, _concat.default)(_context3 = "".concat((0, _factory.matching)(this.settings.core.key), ".")).call(_context3, this.settings.storage.prefix, ".segment.");
      if ((0, _startsWithInstanceProperty(_lang))(builtSegmentKeyName, prefix)) return builtSegmentKeyName.substr(prefix.length);
    }
  }, {
    key: "buildSplitsWithSegmentCountKey",
    value: function buildSplitsWithSegmentCountKey() {
      return "".concat(this.settings.storage.prefix, ".splits.usingSegments");
    }
  }]);
  return KeyBuilderForLocalStorage;
}(_Keys.default);

var _default = KeyBuilderForLocalStorage;
exports.default = _default;
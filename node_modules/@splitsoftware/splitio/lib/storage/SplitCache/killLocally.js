"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

require("core-js/modules/es.object.to-string");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = killLocally;

var _stringify = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/json/stringify"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/promise"));

var _thenable = _interopRequireDefault(require("../../utils/promise/thenable"));

/**
 * Kill `splitName` at `this` split storage, setting `defaultTreatment` and `changeNumber`,
 * only if the split exists and its `changeNumber` is older than the given one.
 * Used for SPLIT_KILL push notifications.
 *
 * @param {string} splitName
 * @param {string} defaultTreatment
 * @param {number} changeNumber
 * @returns {Promise} a promise that is resolved once the split kill is performed.
 * The fulfillment value is a boolean: `true` if the kill success updating the split or `false` if no split is updated, for instance,
 * if the `changeNumber` is old, if the `splitName` is not found, or if the storage fails to apply the update.
 */
function killLocally(splitName, defaultTreatment, changeNumber) {
  var _this = this;

  var split = this.getSplit(splitName);
  var splitPromise = (0, _thenable.default)(split) ? split : _promise.default.resolve(split);
  return splitPromise.then(function (split) {
    if (split) {
      var parsedSplit = JSON.parse(split);

      if (!parsedSplit.changeNumber || parsedSplit.changeNumber < changeNumber) {
        parsedSplit.killed = true;
        parsedSplit.defaultTreatment = defaultTreatment;
        parsedSplit.changeNumber = changeNumber;
        var newSplit = (0, _stringify.default)(parsedSplit);
        return _this.addSplit(splitName, newSplit);
      }
    }

    return false;
  });
}
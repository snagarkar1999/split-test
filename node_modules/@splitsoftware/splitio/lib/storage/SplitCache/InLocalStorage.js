"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/web.dom-collections.iterator");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/map"));

var _isNan = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/number/is-nan"));

var _parseInt2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/parse-int"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/slicedToArray"));

var _getIterator2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/get-iterator"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/keys"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/createClass"));

var _lang = require("../../utils/lang");

var _usesSegments = _interopRequireDefault(require("../../utils/splits/usesSegments"));

var _logger = _interopRequireDefault(require("../../utils/logger"));

var _killLocally = _interopRequireDefault(require("./killLocally"));

var log = (0, _logger.default)('splitio-storage:localstorage');

var SplitCacheLocalStorage = /*#__PURE__*/function () {
  function SplitCacheLocalStorage(keys) {
    (0, _classCallCheck2.default)(this, SplitCacheLocalStorage);
    this.keys = keys;
  }

  (0, _createClass2.default)(SplitCacheLocalStorage, [{
    key: "decrementCount",
    value: function decrementCount(key) {
      var count = (0, _lang.toNumber)(localStorage.getItem(key)) - 1;
      if (count > 0) localStorage.setItem(key, count);else localStorage.removeItem(key);
    }
  }, {
    key: "decrementCounts",
    value: function decrementCounts(split) {
      try {
        if (split) {
          if (split.trafficTypeName) {
            var ttKey = (0, _keys.default)(this).buildTrafficTypeKey(split.trafficTypeName);
            this.decrementCount(ttKey);
          }

          if ((0, _usesSegments.default)(split.conditions)) {
            var segmentsCountKey = (0, _keys.default)(this).buildSplitsWithSegmentCountKey();
            this.decrementCount(segmentsCountKey);
          }
        }
      } catch (e) {
        log.error(e);
      }
    }
  }, {
    key: "incrementCounts",
    value: function incrementCounts(split) {
      try {
        if (split) {
          if (split.trafficTypeName) {
            var ttKey = (0, _keys.default)(this).buildTrafficTypeKey(split.trafficTypeName);
            localStorage.setItem(ttKey, (0, _lang.toNumber)(localStorage.getItem(ttKey)) + 1);
          }

          if ((0, _usesSegments.default)(split.conditions)) {
            var segmentsCountKey = (0, _keys.default)(this).buildSplitsWithSegmentCountKey();
            localStorage.setItem(segmentsCountKey, (0, _lang.toNumber)(localStorage.getItem(segmentsCountKey)) + 1);
          }
        }
      } catch (e) {
        log.error(e);
      }
    }
  }, {
    key: "addSplit",
    value: function addSplit(splitName, split) {
      try {
        var splitKey = (0, _keys.default)(this).buildSplitKey(splitName);
        var splitFromLocalStorage = localStorage.getItem(splitKey);
        var previousSplit = splitFromLocalStorage ? JSON.parse(splitFromLocalStorage) : null;
        this.decrementCounts(previousSplit);
        localStorage.setItem(splitKey, split);
        var parsedSplit = split ? JSON.parse(split) : null;
        this.incrementCounts(parsedSplit);
        return true;
      } catch (e) {
        log.error(e);
        return false;
      }
    }
  }, {
    key: "addSplits",
    value: function addSplits(entries) {
      var results = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (0, _getIterator2.default)(entries), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _step$value = (0, _slicedToArray2.default)(_step.value, 2),
              key = _step$value[0],
              value = _step$value[1];

          results.push(this.addSplit(key, value));
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return results;
    }
  }, {
    key: "removeSplit",
    value: function removeSplit(splitName) {
      try {
        var split = this.getSplit(splitName);
        localStorage.removeItem((0, _keys.default)(this).buildSplitKey(splitName));
        var parsedSplit = JSON.parse(split);
        this.decrementCounts(parsedSplit);
        return 1;
      } catch (e) {
        log.error(e);
        return 0;
      }
    }
    /**
     * Bulk delete of splits from LocalStorage. Returns the number of deleted keys.
     */

  }, {
    key: "removeSplits",
    value: function removeSplits(names) {
      var i = 0;
      var len = names.length;
      var counter = 0;

      for (; i < len; i++) {
        counter += this.removeSplit(names[i]);
      }

      return counter;
    }
  }, {
    key: "getSplit",
    value: function getSplit(splitName) {
      return localStorage.getItem((0, _keys.default)(this).buildSplitKey(splitName));
    }
  }, {
    key: "setChangeNumber",
    value: function setChangeNumber(changeNumber) {
      try {
        localStorage.setItem((0, _keys.default)(this).buildSplitsTillKey(), changeNumber + '');
        return true;
      } catch (e) {
        log.error(e);
        return false;
      }
    }
  }, {
    key: "getChangeNumber",
    value: function getChangeNumber() {
      var n = -1;
      var value = localStorage.getItem((0, _keys.default)(this).buildSplitsTillKey());

      if (value !== null) {
        value = (0, _parseInt2.default)(value, 10);
        return (0, _isNan.default)(value) ? n : value;
      }

      return n;
    }
  }, {
    key: "getAll",
    value: function getAll() {
      var len = localStorage.length;
      var accum = [];
      var cur = 0;

      while (cur < len) {
        var key = localStorage.key(cur);
        var value = key && localStorage.getItem(key);
        if (key != null && (0, _keys.default)(this).isSplitKey(key) && value) accum.push(value);
        cur++;
      }

      return accum;
    }
  }, {
    key: "getKeys",
    value: function getKeys() {
      var len = localStorage.length;
      var accum = [];
      var cur = 0;

      while (cur < len) {
        var key = localStorage.key(cur);
        if (key != null && (0, _keys.default)(this).isSplitKey(key)) accum.push((0, _keys.default)(this).extractKey(key));
        cur++;
      }

      return accum;
    }
  }, {
    key: "trafficTypeExists",
    value: function trafficTypeExists(trafficType) {
      var ttCount = (0, _lang.toNumber)(localStorage.getItem((0, _keys.default)(this).buildTrafficTypeKey(trafficType)));
      return (0, _lang.isFinite)(ttCount) && ttCount > 0;
    }
  }, {
    key: "usesSegments",
    value: function usesSegments() {
      // If there are no splits in the cache yet, assume we need them.
      if (this.getChangeNumber() === -1) return true;
      var storedCount = localStorage.getItem((0, _keys.default)(this).buildSplitsWithSegmentCountKey());
      var splitsWithSegmentsCount = storedCount === null ? 0 : (0, _lang.toNumber)(storedCount);

      if ((0, _lang.isFinite)(splitsWithSegmentsCount)) {
        return splitsWithSegmentsCount > 0;
      } else {
        return true;
      }
    }
  }, {
    key: "flush",
    value: function flush() {
      log.info('Flushing localStorage');
      localStorage.clear();
    }
    /**
     * Fetches multiple splits definitions.
     */

  }, {
    key: "fetchMany",
    value: function fetchMany(splitNames) {
      var _this = this;

      var splits = new _map.default();
      (0, _forEach.default)(splitNames).call(splitNames, function (splitName) {
        splits.set(splitName, localStorage.getItem((0, _keys.default)(_this).buildSplitKey(splitName)));
      });
      return splits;
    }
    /**
     * Check if the splits information is already stored in cache.
     * In this function we could add more code to check if the data is valid.
     */

  }, {
    key: "checkCache",
    value: function checkCache() {
      return this.getChangeNumber() > -1;
    }
  }]);
  return SplitCacheLocalStorage;
}();

SplitCacheLocalStorage.prototype.killLocally = _killLocally.default;
var _default = SplitCacheLocalStorage;
exports.default = _default;
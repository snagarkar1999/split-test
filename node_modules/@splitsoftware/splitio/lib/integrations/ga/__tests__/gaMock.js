"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty2 = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty2(exports, "__esModule", {
  value: true
});

exports.modelMock = modelMock;
exports.gaMock = gaMock;
exports.gaRemove = gaRemove;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/define-property"));

var _defineProperties = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/define-properties"));

var _getOwnPropertyDescriptors = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _getOwnPropertyDescriptor = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/filter"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));

var _defineProperty3 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/typeof"));

var _sinon = _interopRequireDefault(require("sinon"));

function ownKeys(object, enumerableOnly) { var keys = (0, _keys.default)(object); if (_getOwnPropertySymbols.default) { var symbols = (0, _getOwnPropertySymbols.default)(object); if (enumerableOnly) symbols = (0, _filter.default)(symbols).call(symbols, function (sym) { return (0, _getOwnPropertyDescriptor.default)(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context; (0, _forEach.default)(_context = ownKeys(Object(source), true)).call(_context, function (key) { (0, _defineProperty3.default)(target, key, source[key]); }); } else if (_getOwnPropertyDescriptors.default) { (0, _defineProperties.default)(target, (0, _getOwnPropertyDescriptors.default)(source)); } else { var _context2; (0, _forEach.default)(_context2 = ownKeys(Object(source))).call(_context2, function (key) { (0, _defineProperty2.default)(target, key, (0, _getOwnPropertyDescriptor.default)(source, key)); }); } } return target; }

function modelMock(fieldsObject) {
  return {
    get: function get(fieldName) {
      return fieldsObject[fieldName];
    },
    set: function set(fieldNameOrObject, fieldValue) {
      if ((0, _typeof2.default)(fieldNameOrObject) === 'object') fieldsObject = _objectSpread({}, fieldsObject, {}, fieldNameOrObject);else fieldsObject[fieldNameOrObject] = fieldValue;
    }
  };
}

function gaMock() {
  var __originalSendHitTask = _sinon.default.spy();

  var __tasks = {
    sendHitTask: __originalSendHitTask
  };

  var ga = _sinon.default.stub().callsFake(function (command) {
    if (command === 'send') {
      var fieldsObject = arguments[1];

      __tasks.sendHitTask(modelMock(fieldsObject));
    }
  });

  var set = _sinon.default.fake(function (taskName, taskFunc) {
    __tasks[taskName] = taskFunc;
  });

  var get = _sinon.default.fake(function (taskName) {
    return __tasks[taskName];
  }); // Add ga to window object


  if (typeof window === 'undefined') {
    if (global) global.window = {};
  }

  window['GoogleAnalyticsObject'] = 'ga';
  window['ga'] = window['ga'] || ga;
  return {
    ga: ga,
    tracker: {
      get: get,
      set: set,
      __originalSendHitTask: __originalSendHitTask
    }
  };
}

function gaRemove() {
  if (typeof window !== 'undefined') window[window['GoogleAnalyticsObject'] || 'ga'] = undefined;
}
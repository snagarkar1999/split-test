"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = Fetcher;

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _getFetch = _interopRequireDefault(require("../getFetch"));

var _Errors = require("../../utils/lang/Errors");

var _logger = _interopRequireDefault(require("../../utils/logger"));

var log = (0, _logger.default)('splitio-services:service');

function Fetcher(request) {
  // using `fetch(url, options)` signature to work with unfetch
  var url = request.url; // @TODO: update to use global fetch when IE10+ is deprecated

  return (0, _getFetch.default)()(url, request) // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Checking_that_the_fetch_was_successful
  .then(function (response) {
    if (!response.ok) {
      throw {
        response: response
      };
    }

    return response;
  }).catch(function (error) {
    var resp = error.response;
    var msg = '';

    if (resp) {
      // An HTTP error
      switch (resp.status) {
        case 404:
          msg = 'Invalid API key or resource not found.';
          break;

        default:
          msg = resp.statusText;
          break;
      }
    } else {
      // Something else, either an error making the request or a Network error.
      msg = error.message;
    }

    if (!resp || resp.status !== 403) {
      var _context, _context2;

      // 403's log we'll be handled somewhere else.
      log[request.logErrorsAsInfo ? 'info' : 'error']((0, _concat.default)(_context = (0, _concat.default)(_context2 = "Response status is not OK. Status: ".concat(resp ? resp.status : 'NO_STATUS', ". URL: ")).call(_context2, url, ". Message: ")).call(_context, msg));
    } // passes `undefined` as statusCode if not an HTTP error (resp === undefined)


    throw new _Errors.SplitNetworkError(msg, resp && resp.status);
  });
}
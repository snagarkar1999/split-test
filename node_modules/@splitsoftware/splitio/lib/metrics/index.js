"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _stringify = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/json/stringify"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/promise"));

var _logger = _interopRequireDefault(require("../utils/logger"));

var _timeTracker = _interopRequireDefault(require("../utils/timeTracker"));

var _repeat = _interopRequireDefault(require("../utils/fn/repeat"));

var _metrics = _interopRequireDefault(require("../services/metrics"));

var _times = _interopRequireDefault(require("../services/metrics/times"));

var _counters = _interopRequireDefault(require("../services/metrics/counters"));

var _dto = require("../services/metrics/dto");

var _impressions = _interopRequireDefault(require("../services/impressions"));

var _bulk = _interopRequireDefault(require("../services/impressions/bulk"));

var _dto2 = require("../services/impressions/dto");

var _Collectors = require("./Collectors");

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
var log = (0, _logger.default)('splitio-metrics');

var MetricsFactory = function MetricsFactory(context) {
  var impressionsRetries = 0;
  var settings = context.get(context.constants.SETTINGS);
  var storage = context.get(context.constants.STORAGE);

  var pushMetrics = function pushMetrics() {
    if (storage.metrics.isEmpty() && storage.count.isEmpty()) return _promise.default.resolve();
    log.info('Pushing metrics');

    var latencyTrackerStop = _timeTracker.default.start(_timeTracker.default.TaskNames.METRICS_PUSH); // POST latencies


    var latenciesPromise = storage.metrics.isEmpty() ? null : (0, _metrics.default)((0, _times.default)(settings, {
      body: (0, _stringify.default)((0, _dto.fromLatenciesCollector)(storage.metrics))
    })).then(function () {
      return storage.metrics.clear();
    }).catch(function () {
      return storage.metrics.clear();
    }); // POST counters

    var countersPromise = storage.count.isEmpty() ? null : (0, _metrics.default)((0, _counters.default)(settings, {
      body: (0, _stringify.default)((0, _dto.fromCountersCollector)(storage.count))
    })).then(function () {
      return storage.count.clear();
    }).catch(function () {
      return storage.count.clear();
    });
    return _promise.default.all([latenciesPromise, countersPromise]).then(function (resp) {
      // After both finishes, track the end and return the results
      latencyTrackerStop();
      return resp;
    });
  };

  var pushImpressions = function pushImpressions() {
    if (storage.impressions.isEmpty()) return _promise.default.resolve();
    var imprCount = storage.impressions.queue.length;
    log.info("Pushing ".concat(imprCount, " impressions"));

    var latencyTrackerStop = _timeTracker.default.start(_timeTracker.default.TaskNames.IMPRESSIONS_PUSH);

    return (0, _impressions.default)((0, _bulk.default)(settings, {
      body: (0, _stringify.default)((0, _dto2.fromImpressionsCollector)(storage.impressions, settings))
    })).then(function () {
      impressionsRetries = 0;
      storage.impressions.clear();
    }).catch(function (err) {
      if (impressionsRetries) {
        var _context;

        // For now we retry only once.
        log.warn((0, _concat.default)(_context = "Droping ".concat(imprCount, " impressions after retry. Reason ")).call(_context, err, "."));
        impressionsRetries = 0;
        storage.impressions.clear();
      } else {
        var _context2;

        impressionsRetries++;
        log.warn((0, _concat.default)(_context2 = "Failed to push ".concat(imprCount, " impressions, keeping data to retry on next iteration. Reason ")).call(_context2, err, "."));
      }
    }).then(function () {
      return latencyTrackerStop();
    });
  };

  var stopImpressionsPublisher = false;
  var stopPerformancePublisher = false;
  return {
    start: function start() {
      stopImpressionsPublisher = (0, _repeat.default)(function (schedulePublisher) {
        return pushImpressions().then(function () {
          return schedulePublisher();
        });
      }, settings.scheduler.impressionsRefreshRate);
      stopPerformancePublisher = (0, _repeat.default)(function (schedulePublisher) {
        return pushMetrics().then(function () {
          return schedulePublisher();
        });
      }, settings.scheduler.metricsRefreshRate);
    },
    flush: function flush() {
      return pushImpressions();
    },
    stop: function stop() {
      stopImpressionsPublisher && stopImpressionsPublisher();
      stopPerformancePublisher && stopPerformancePublisher();
    },
    // Metrics collectors
    collectors: {
      segmentChanges: new _Collectors.SegmentChangesCollector(storage),
      splitChanges: new _Collectors.SplitChangesCollector(storage),
      mySegments: new _Collectors.MySegmentsCollector(storage),
      client: new _Collectors.ClientCollector(storage)
    }
  };
};

var _default = MetricsFactory;
exports.default = _default;
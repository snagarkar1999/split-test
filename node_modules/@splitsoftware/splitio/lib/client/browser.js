"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _bind = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/bind"));

var _lang = require("../utils/lang");

var _inputValidation = _interopRequireDefault(require("./inputValidation"));

var _constants = require("../utils/constants");

var _inputValidation2 = require("../utils/inputValidation");

function BrowserClientFactory(context) {
  var _context, _context2, _context3, _context4, _context5, _bindInstanceProperty2, _context6;

  var settings = context.get(context.constants.SETTINGS);
  var maybeKey = (0, _lang.get)(settings, 'core.key', undefined);
  var maybeTT = (0, _lang.get)(settings, 'core.trafficType', undefined);

  if (settings.mode === _constants.LOCALHOST_MODE && maybeKey === undefined) {
    settings.core.key = 'localhost_key';
  } else {
    settings.core.key = (0, _inputValidation2.validateKey)(maybeKey, 'Client instantiation');
  } // Key is also binded to the .track method. Same thing happens with trafficType but only if present on configs. (not required)


  var trackBindings = [settings.core.key];

  if (maybeTT !== undefined) {
    var tt = (0, _inputValidation2.validateTrafficType)(maybeTT, 'Client instantiation');
    settings.core.trafficType = tt;
    trackBindings.push(tt);
  }

  var client = (0, _inputValidation.default)(context, true, trackBindings.length > 1);
  client.isBrowserClient = true; // In the browser land, we can bind the key and the traffic type (if provided)

  client.getTreatment = (0, _bind.default)(_context = client.getTreatment).call(_context, client, settings.core.key);
  client.getTreatmentWithConfig = (0, _bind.default)(_context2 = client.getTreatmentWithConfig).call(_context2, client, settings.core.key);
  client.getTreatments = (0, _bind.default)(_context3 = client.getTreatments).call(_context3, client, settings.core.key);
  client.getTreatmentsWithConfig = (0, _bind.default)(_context4 = client.getTreatmentsWithConfig).call(_context4, client, settings.core.key);
  client.track = (_bindInstanceProperty2 = (0, _bind.default)(_context5 = client.track)).call.apply(_bindInstanceProperty2, (0, _concat.default)(_context6 = [_context5, client]).call(_context6, trackBindings));
  return client;
}

var _default = BrowserClientFactory;
exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

require("core-js/modules/web.url.to-json");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _stringify = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/json/stringify"));

var _bind = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/bind"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/createClass"));

var _bulk = _interopRequireDefault(require("../services/events/bulk"));

var _events = _interopRequireDefault(require("../services/events"));

var _bulk2 = _interopRequireDefault(require("../services/impressions/bulk"));

var _impressions = _interopRequireDefault(require("../services/impressions"));

var _dto = require("../services/impressions/dto");

var _logger = _interopRequireDefault(require("../utils/logger"));

var log = (0, _logger.default)('splitio-client:cleanup'); // 'unload' event is used instead of 'beforeunload', since 'unload' is not a cancelable event, so no other listeners can stop the event from occurring.

var UNLOAD_DOM_EVENT = 'unload';
/**
 * We'll listen for 'unload' event over the window object, since it's the standard way to listen page reload and close.
 *
 */

var BrowserSignalListener = /*#__PURE__*/function () {
  function BrowserSignalListener(context) {
    var _context;

    (0, _classCallCheck2.default)(this, BrowserSignalListener);
    this.storage = context.get(context.constants.STORAGE);
    this.settings = context.get(context.constants.SETTINGS);
    this.flushData = (0, _bind.default)(_context = this.flushData).call(_context, this);
  }
  /**
   * start method.
   * Called when SplitFactory is initialized.
   * We add a handler on unload events. The handler flushes remaining impressions and events to the backend.
   */


  (0, _createClass2.default)(BrowserSignalListener, [{
    key: "start",
    value: function start() {
      if (window && window.addEventListener) {
        log.debug('Registering flush handler when unload page event is triggered.');
        window.addEventListener(UNLOAD_DOM_EVENT, this.flushData);
      }
    }
    /**
     * stop method.
     * Called when client is destroyed.
     * We need to remove the handler for unload events, since it can break if called when Split context was destroyed.
     */

  }, {
    key: "stop",
    value: function stop() {
      if (window && window.removeEventListener) {
        log.debug('Deregistering flush handler when unload page event is triggered.');
        window.removeEventListener(UNLOAD_DOM_EVENT, this.flushData);
      }
    }
    /**
     * _flushData method.
     * Called when unload event is triggered. It flushed remaining impressions and events to the backend,
     * using beacon API if possible, or falling back to regular post transport.
     */

  }, {
    key: "flushData",
    value: function flushData() {
      this._flushImpressions();

      this._flushEvents();
    }
  }, {
    key: "_flushImpressions",
    value: function _flushImpressions() {
      var impressions = this.storage.impressions; // if there are impressions in storage, send them to backend

      if (!impressions.isEmpty()) {
        var url = this.settings.url('/testImpressions/beacon');
        var impressionsPayload = (0, _dto.fromImpressionsCollector)(impressions, this.settings);

        if (!this._sendBeacon(url, impressionsPayload)) {
          (0, _impressions.default)((0, _bulk2.default)(this.settings, {
            body: (0, _stringify.default)(impressionsPayload)
          }));
        }

        impressions.clear();
      }
    }
  }, {
    key: "_flushEvents",
    value: function _flushEvents() {
      var events = this.storage.events; // if there are events in storage, send them to backend

      if (!events.isEmpty()) {
        var url = this.settings.url('/events/beacon');
        var eventsPayload = events.toJSON();

        if (!this._sendBeacon(url, eventsPayload)) {
          (0, _events.default)((0, _bulk.default)(this.settings, {
            body: (0, _stringify.default)(eventsPayload)
          }));
        }

        events.clear();
      }
    }
    /**
     * _sendBeacon method.
     * Util method that check if beacon API is available, build the payload and send it.
     */

  }, {
    key: "_sendBeacon",
    value: function _sendBeacon(url, data) {
      if (navigator && navigator.sendBeacon) {
        var payload = (0, _stringify.default)({
          entries: data,
          token: this.settings.core.authorizationKey,
          sdk: this.settings.version
        });
        return navigator.sendBeacon(url, payload);
      }

      return false;
    }
  }]);
  return BrowserSignalListener;
}();

exports.default = BrowserSignalListener;
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/filter"));

var _bind = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/bind"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/createClass"));

var _backoff = _interopRequireDefault(require("../../utils/backoff"));

/**
 * SegmentUpdateWorker class
 */
var SegmentUpdateWorker = /*#__PURE__*/function () {
  /**
   * @param {Object} segmentsStorage
   * @param {Object} segmentsProducer
   */
  function SegmentUpdateWorker(segmentsStorage, segmentsProducer) {
    var _context, _context2;

    (0, _classCallCheck2.default)(this, SegmentUpdateWorker);
    this.segmentsStorage = segmentsStorage;
    this.segmentsProducer = segmentsProducer;
    this.maxChangeNumbers = {};
    this.put = (0, _bind.default)(_context = this.put).call(_context, this);
    this.__handleSegmentUpdateCall = (0, _bind.default)(_context2 = this.__handleSegmentUpdateCall).call(_context2, this);
    this.backoff = new _backoff.default(this.__handleSegmentUpdateCall);
  } // Private method
  // Preconditions: this.segmentsProducer.isSynchronizingSegments === false


  (0, _createClass2.default)(SegmentUpdateWorker, [{
    key: "__handleSegmentUpdateCall",
    value: function __handleSegmentUpdateCall() {
      var _context3,
          _this = this;

      var segmentsToFetch = (0, _filter.default)(_context3 = (0, _keys.default)(this.maxChangeNumbers)).call(_context3, function (segmentName) {
        return _this.maxChangeNumbers[segmentName] > _this.segmentsStorage.getChangeNumber(segmentName);
      });

      if (segmentsToFetch.length > 0) {
        this.handleNewEvent = false;
        this.segmentsProducer.synchronizeSegment(segmentsToFetch).then(function () {
          if (_this.handleNewEvent) {
            _this.__handleSegmentUpdateCall();
          } else {
            _this.backoff.scheduleCall();
          }
        });
      }
    }
    /**
     * Invoked by NotificationProcessor on SEGMENT_UPDATE event
     *
     * @param {number} changeNumber change number of the SEGMENT_UPDATE notification
     * @param {string} segmentName segment name of the SEGMENT_UPDATE notification
     */

  }, {
    key: "put",
    value: function put(changeNumber, segmentName) {
      var currentChangeNumber = this.segmentsStorage.getChangeNumber(segmentName);
      if (changeNumber <= currentChangeNumber || changeNumber <= this.maxChangeNumbers[segmentName]) return;
      this.maxChangeNumbers[segmentName] = changeNumber;
      this.handleNewEvent = true;
      this.backoff.reset();
      if (this.segmentsProducer.isSynchronizingSegments()) return;

      this.__handleSegmentUpdateCall();
    }
  }]);
  return SegmentUpdateWorker;
}();

exports.default = SegmentUpdateWorker;
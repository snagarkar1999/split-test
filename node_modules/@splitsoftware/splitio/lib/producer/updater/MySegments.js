"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

require("core-js/modules/es.object.to-string");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _setTimeout2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/set-timeout"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/promise"));

var _logger = _interopRequireDefault(require("../../utils/logger"));

var _Errors = require("../../utils/lang/Errors");

var _MySegments = _interopRequireDefault(require("../fetcher/MySegments"));

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
var log = (0, _logger.default)('splitio-producer:my-segments');

function MySegmentsUpdaterFactory(context) {
  var _context$getAll = context.getAll(),
      settings = _context$getAll[context.constants.SETTINGS],
      readiness = _context$getAll[context.constants.READINESS],
      storage = _context$getAll[context.constants.STORAGE],
      metricCollectors = _context$getAll[context.constants.COLLECTORS];

  var segmentsEventEmitter = readiness.segments;
  var readyOnAlreadyExistentState = true;
  var startingUp = true;

  function updateSegments(segments) {
    // Update the list of segment names available
    var shouldNotifyUpdate = storage.segments.resetSegments(segments); // Notify update if required

    if (storage.splits.usesSegments() && (shouldNotifyUpdate || readyOnAlreadyExistentState)) {
      readyOnAlreadyExistentState = false;
      segmentsEventEmitter.emit(segmentsEventEmitter.SDK_SEGMENTS_ARRIVED);
    }
  }

  return function MySegmentsUpdater() {
    var retry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var segmentList = arguments.length > 1 ? arguments[1] : undefined;

    // If segmentList is provided, there is no need to fetch mySegments
    if (segmentList) {
      updateSegments(segmentList);
      return _promise.default.resolve();
    } // NOTE: We only collect metrics on startup.


    return (0, _MySegments.default)(settings, startingUp, metricCollectors).then(function (segments) {
      // Only when we have downloaded segments completely, we should not keep
      // retrying anymore
      startingUp = false;
      updateSegments(segments);
    }).catch(function (error) {
      if (!(error instanceof _Errors.SplitError)) (0, _setTimeout2.default)(function () {
        throw error;
      }, 0);

      if (startingUp && settings.startup.retriesOnFailureBeforeReady > retry) {
        var _context;

        retry += 1;
        log.warn((0, _concat.default)(_context = "Retrying download of segments #".concat(retry, ". Reason: ")).call(_context, error));
        return MySegmentsUpdater(retry);
      } else {
        startingUp = false;
      }

      return false; // shouldUpdate = false
    });
  };
}

var _default = MySegmentsUpdaterFactory;
exports.default = _default;
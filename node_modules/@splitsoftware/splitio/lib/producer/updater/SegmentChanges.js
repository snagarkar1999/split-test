"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _findIndexInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/find-index");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _getIterator2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/get-iterator"));

var _setTimeout2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/set-timeout"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/promise"));

var _logger = _interopRequireDefault(require("../../utils/logger"));

var _SegmentChanges = _interopRequireDefault(require("../fetcher/SegmentChanges"));

var _lang = require("../../utils/lang");

var _Errors = require("../../utils/lang/Errors");

var _thenable = _interopRequireDefault(require("../../utils/promise/thenable"));

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
var log = (0, _logger.default)('splitio-producer:segment-changes');
var inputValidationLog = (0, _logger.default)('', {
  displayAllErrors: true
});

var SegmentChangesUpdaterFactory = function SegmentChangesUpdaterFactory(context) {
  var _context$getAll = context.getAll(),
      settings = _context$getAll[context.constants.SETTINGS],
      readiness = _context$getAll[context.constants.READINESS],
      storage = _context$getAll[context.constants.STORAGE],
      metricCollectors = _context$getAll[context.constants.COLLECTORS];

  var segmentsEventEmitter = readiness.segments;
  var readyOnAlreadyExistentState = true;
  /**
   * @param {string[] | undefined} segmentNames list of segment names to fetch. By passing `undefined` it fetches the list of segments registered at the storage
   */

  return function SegmentChangesUpdater(segmentNames) {
    log.debug('Started segments update'); // Async fetchers are collected here.

    var updaters = [];

    function segmentsUpdater(segments) {
      var sincePromises = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        var _loop = function _loop() {
          var segmentName = _step.value;

          var segmentUpdater = function segmentUpdater(since) {
            log.debug("Processing segment ".concat(segmentName));
            updaters.push((0, _SegmentChanges.default)(settings, segmentName, since, metricCollectors).then(function (changes) {
              var changeNumber = -1;
              var changePromises = [];
              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;

              try {
                for (var _iterator2 = (0, _getIterator2.default)(changes), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var _context, _context2, _context3;

                  var x = _step2.value;
                  var promises = [];

                  if (x.added.length > 0) {
                    var result = storage.segments.addToSegment(segmentName, x.added);
                    if ((0, _thenable.default)(result)) promises.push(result);
                  }

                  if (x.removed.length > 0) {
                    var _result = storage.segments.removeFromSegment(segmentName, x.removed);

                    if ((0, _thenable.default)(_result)) promises.push(_result);
                  }

                  if (x.added.length > 0 || x.removed.length > 0) {
                    var _result2 = storage.segments.setChangeNumber(segmentName, x.till);

                    if ((0, _thenable.default)(_result2)) promises.push(_result2);
                    changeNumber = x.till;
                  }

                  log.debug((0, _concat.default)(_context = (0, _concat.default)(_context2 = (0, _concat.default)(_context3 = "Processed ".concat(segmentName, " with till = ")).call(_context3, x.till, ". Added: ")).call(_context2, x.added.length, ". Removed: ")).call(_context, x.removed.length));
                  if (promises.length > 0) changePromises.push.apply(changePromises, promises);
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                    _iterator2.return();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }

              return _promise.default.all(changePromises).then(function () {
                return changeNumber;
              });
            }));
          };

          var since = storage.segments.getChangeNumber(segmentName);
          var sincePromise = (0, _thenable.default)(since) ? since.then(segmentUpdater) : segmentUpdater(since);
          sincePromises.push(sincePromise);
        };

        for (var _iterator = (0, _getIterator2.default)(segments), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          _loop();
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return _promise.default.all(sincePromises).then(function () {
        return _promise.default.all(updaters).then(function (shouldUpdateFlags) {
          if ((0, _findIndexInstanceProperty(_lang))(shouldUpdateFlags, function (v) {
            return v !== -1;
          }) !== -1 || readyOnAlreadyExistentState) {
            readyOnAlreadyExistentState = false;
            segmentsEventEmitter.emit(segmentsEventEmitter.SDK_SEGMENTS_ARRIVED);
          }
        }).catch(function (error) {
          if (!(error instanceof _Errors.SplitError)) (0, _setTimeout2.default)(function () {
            throw error;
          }, 0);

          if (error.statusCode === 403) {
            context.put(context.constants.DESTROYED, true);
            inputValidationLog.error('Factory instantiation: you passed a Browser type authorizationKey, please grab an Api Key from the Split web console that is of type SDK.');
          }
        });
      });
    } // If not a segment name provided, read list of available segments names to be updated.


    var segments = segmentNames ? segmentNames : storage.segments.getRegisteredSegments();
    return (0, _thenable.default)(segments) ? segments.then(segmentsUpdater) : segmentsUpdater(segments);
  };
};

var _default = SegmentChangesUpdaterFactory;
exports.default = _default;
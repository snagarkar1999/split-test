"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _setTimeout2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/set-timeout"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/promise"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/toConsumableArray"));

var _set = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/set"));

var _getIterator2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/get-iterator"));

var _stringify = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/json/stringify"));

var _reduce = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/reduce"));

var _logger = _interopRequireDefault(require("../../utils/logger"));

var _SplitChanges = _interopRequireDefault(require("../fetcher/SplitChanges"));

var _segments = _interopRequireDefault(require("../../engine/parser/segments"));

var _Errors = require("../../utils/lang/Errors");

var _thenable = _interopRequireDefault(require("../../utils/promise/thenable"));

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
var log = (0, _logger.default)('splitio-producer:split-changes');

function computeSplitsMutation(entries) {
  var computed = (0, _reduce.default)(entries).call(entries, function (accum, split) {
    if (split.status === 'ACTIVE') {
      accum.added.push([split.name, (0, _stringify.default)(split)]);
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (0, _getIterator2.default)((0, _segments.default)(split.conditions)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var segmentName = _step.value;
          accum.segments.add(segmentName);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    } else {
      accum.removed.push(split.name);
    }

    return accum;
  }, {
    added: [],
    removed: [],
    segments: new _set.default()
  });
  computed.segments = (0, _toConsumableArray2.default)(computed.segments);
  return computed;
}

function SplitChangesUpdaterFactory(context) {
  var isNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var _context$getAll = context.getAll(),
      settings = _context$getAll[context.constants.SETTINGS],
      readiness = _context$getAll[context.constants.READINESS],
      storage = _context$getAll[context.constants.STORAGE],
      metricCollectors = _context$getAll[context.constants.COLLECTORS];

  var splitsEventEmitter = readiness.splits;
  var startingUp = true;
  var readyOnAlreadyExistentState = true;
  return function SplitChangesUpdater() {
    var retry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    function splitChanges(since) {
      log.debug("Spin up split update using since = ".concat(since));
      var fetcherPromise = (0, _SplitChanges.default)(settings, since, startingUp, metricCollectors, isNode).then(function (splitChanges) {
        startingUp = false;
        var mutation = computeSplitsMutation(splitChanges.splits);
        log.debug("New splits ".concat(mutation.added.length));
        log.debug("Removed splits ".concat(mutation.removed.length));
        log.debug("Segment names collected ".concat(mutation.segments)); // Write into storage

        return _promise.default.all([storage.splits.addSplits(mutation.added), storage.splits.removeSplits(mutation.removed), storage.splits.setChangeNumber(splitChanges.till), storage.segments.registerSegments(mutation.segments)]).then(function () {
          if (since !== splitChanges.till || readyOnAlreadyExistentState) {
            readyOnAlreadyExistentState = false;
            splitsEventEmitter.emit(splitsEventEmitter.SDK_SPLITS_ARRIVED);
          }
        });
      }).catch(function (error) {
        if (!(error instanceof _Errors.SplitError)) {
          (0, _setTimeout2.default)(function () {
            throw error;
          }, 0);
          startingUp = false; // Stop retrying.
        }

        log.warn("Error while doing fetch of Splits ".concat(error));

        if (startingUp && settings.startup.retriesOnFailureBeforeReady > retry) {
          var _context;

          retry += 1;
          log.info((0, _concat.default)(_context = "Retrying download of splits #".concat(retry, ". Reason: ")).call(_context, error));
          return SplitChangesUpdater(retry);
        } else {
          startingUp = false;
        }

        return false;
      }); // After triggering the requests, if we have cached splits information let's notify that.

      if (startingUp && storage.splits.checkCache()) splitsEventEmitter.emit(splitsEventEmitter.SDK_SPLITS_CACHE_LOADED);
      return fetcherPromise;
    } // @TODO check why e2e tests take so much time when sync storage result is not handled in a promise


    var since = storage.splits.getChangeNumber();
    var sincePromise = (0, _thenable.default)(since) ? since.then(splitChanges) : _promise.default.resolve(since);
    return sincePromise.then(splitChanges);
  };
}

var _default = SplitChangesUpdaterFactory;
exports.default = _default;
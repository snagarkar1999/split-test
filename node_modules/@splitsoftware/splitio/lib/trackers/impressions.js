"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty2 = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty2(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/define-property"));

var _defineProperties = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/define-properties"));

var _getOwnPropertyDescriptors = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _getOwnPropertyDescriptor = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/filter"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));

var _setTimeout2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/set-timeout"));

var _defineProperty3 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));

var _splice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/splice"));

var _logger = _interopRequireDefault(require("../utils/logger"));

var _thenable = _interopRequireDefault(require("../utils/promise/thenable"));

function ownKeys(object, enumerableOnly) { var keys = (0, _keys.default)(object); if (_getOwnPropertySymbols.default) { var symbols = (0, _getOwnPropertySymbols.default)(object); if (enumerableOnly) symbols = (0, _filter.default)(symbols).call(symbols, function (sym) { return (0, _getOwnPropertyDescriptor.default)(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context4; (0, _forEach.default)(_context4 = ownKeys(Object(source), true)).call(_context4, function (key) { (0, _defineProperty3.default)(target, key, source[key]); }); } else if (_getOwnPropertyDescriptors.default) { (0, _defineProperties.default)(target, (0, _getOwnPropertyDescriptors.default)(source)); } else { var _context5; (0, _forEach.default)(_context5 = ownKeys(Object(source))).call(_context5, function (key) { (0, _defineProperty2.default)(target, key, (0, _getOwnPropertyDescriptor.default)(source, key)); }); } } return target; }

var log = (0, _logger.default)('splitio-client:impressions-tracker');

function ImpressionsTracker(context) {
  var collector = context.get(context.constants.STORAGE).impressions;
  var settings = context.get(context.constants.SETTINGS);
  var listener = settings.impressionListener;
  var integrationsManager = context.get(context.constants.INTEGRATIONS_MANAGER, true);
  var _settings$runtime = settings.runtime,
      ip = _settings$runtime.ip,
      hostname = _settings$runtime.hostname;
  var sdkLanguageVersion = settings.version;
  var _queue = [];
  return {
    queue: function queue(impression, attributes) {
      _queue.push({
        impression: impression,
        attributes: attributes
      });
    },
    track: function track() {
      var impressionsCount = _queue.length;
      var slice = (0, _splice.default)(_queue).call(_queue, 0, impressionsCount);
      var res = collector.track((0, _map.default)(slice).call(slice, function (_ref) {
        var impression = _ref.impression;
        return impression;
      })); // If we're on an async storage, handle error and log it.

      if ((0, _thenable.default)(res)) {
        res.then(function () {
          var _context;

          log.debug((0, _concat.default)(_context = "Successfully stored ".concat(impressionsCount, " impression")).call(_context, impressionsCount === 1 ? '' : 's', "."));
        }).catch(function (err) {
          var _context2, _context3;

          log.error((0, _concat.default)(_context2 = (0, _concat.default)(_context3 = "Could not store impressions bulk with ".concat(impressionsCount, " impression")).call(_context3, impressionsCount === 1 ? '' : 's', ". Error: ")).call(_context2, err));
        });
      }

      if (listener || integrationsManager) {
        var _loop = function _loop(i) {
          var impressionData = {
            // copy of impression, to avoid unexpected behaviour if modified by integrations or impressionListener
            impression: _objectSpread({}, slice[i].impression),
            attributes: slice[i].attributes,
            ip: ip,
            hostname: hostname,
            sdkLanguageVersion: sdkLanguageVersion
          }; // Wrap in a timeout because we don't want it to be blocking.

          (0, _setTimeout2.default)(function () {
            // integrationsManager.handleImpression does not throw errors
            if (integrationsManager) integrationsManager.handleImpression(impressionData);

            try {
              // An exception on the listeners should not break the SDK.
              if (listener) listener.logImpression(impressionData);
            } catch (err) {
              log.error("Impression listener logImpression method threw: ".concat(err, "."));
            }
          }, 0);
        };

        for (var i = 0; i < impressionsCount; i++) {
          _loop(i);
        }
      }
    }
  };
}

var _default = ImpressionsTracker;
exports.default = _default;
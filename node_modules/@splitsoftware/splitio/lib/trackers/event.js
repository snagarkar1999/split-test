"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty2 = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty2(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/define-property"));

var _defineProperties = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/define-properties"));

var _getOwnPropertyDescriptors = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _getOwnPropertyDescriptor = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/filter"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));

var _bind = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/bind"));

var _defineProperty3 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));

var _setTimeout2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/set-timeout"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _logger = _interopRequireDefault(require("../utils/logger"));

var _thenable = _interopRequireDefault(require("../utils/promise/thenable"));

function ownKeys(object, enumerableOnly) { var keys = (0, _keys.default)(object); if (_getOwnPropertySymbols.default) { var symbols = (0, _getOwnPropertySymbols.default)(object); if (enumerableOnly) symbols = (0, _filter.default)(symbols).call(symbols, function (sym) { return (0, _getOwnPropertyDescriptor.default)(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context6; (0, _forEach.default)(_context6 = ownKeys(Object(source), true)).call(_context6, function (key) { (0, _defineProperty3.default)(target, key, source[key]); }); } else if (_getOwnPropertyDescriptors.default) { (0, _defineProperties.default)(target, (0, _getOwnPropertyDescriptors.default)(source)); } else { var _context7; (0, _forEach.default)(_context7 = ownKeys(Object(source))).call(_context7, function (key) { (0, _defineProperty2.default)(target, key, (0, _getOwnPropertyDescriptor.default)(source, key)); }); } } return target; }

var log = (0, _logger.default)('splitio-client:event-tracker');

function EventTracker(context) {
  var collector = context.get(context.constants.STORAGE).events;
  var integrationsManager = context.get(context.constants.INTEGRATIONS_MANAGER, true);

  function queueEventsCallback(eventData, tracked) {
    var _context, _context2, _context3, _context4, _context5;

    var eventTypeId = eventData.eventTypeId,
        trafficTypeName = eventData.trafficTypeName,
        key = eventData.key,
        value = eventData.value,
        timestamp = eventData.timestamp,
        properties = eventData.properties; // Logging every prop would be too much.

    var msg = (0, _concat.default)(_context = (0, _concat.default)(_context2 = (0, _concat.default)(_context3 = (0, _concat.default)(_context4 = (0, _concat.default)(_context5 = "event of type \"".concat(eventTypeId, "\" for traffic type \"")).call(_context5, trafficTypeName, "\". Key: ")).call(_context4, key, ". Value: ")).call(_context3, value, ". Timestamp: ")).call(_context2, timestamp, ". ")).call(_context, properties ? 'With properties.' : 'With no properties.');

    if (tracked) {
      log.info("Successfully qeued ".concat(msg));

      if (integrationsManager) {
        // Wrap in a timeout because we don't want it to be blocking.
        (0, _setTimeout2.default)(function () {
          // copy of event, to avoid unexpected behaviour if modified by integrations
          var eventDataCopy = _objectSpread({}, eventData);

          if (eventData.properties) eventDataCopy.properties = _objectSpread({}, eventData.properties); // integrationsManager does not throw errors (they are internally handled by each integration module)

          integrationsManager.handleEvent(eventDataCopy);
        }, 0);
      }
    } else {
      log.warn("Failed to queue ".concat(msg));
    }

    return tracked;
  }

  return {
    track: function track(eventData, size) {
      var tracked = collector.track(eventData, size);

      if ((0, _thenable.default)(tracked)) {
        return tracked.then((0, _bind.default)(queueEventsCallback).call(queueEventsCallback, null, eventData));
      } else {
        return queueEventsCallback(eventData, tracked);
      }
    }
  };
}

var _default = EventTracker;
exports.default = _default;
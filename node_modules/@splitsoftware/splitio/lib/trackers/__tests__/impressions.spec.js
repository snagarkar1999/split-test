"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/define-property"));

var _defineProperties = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/define-properties"));

var _getOwnPropertyDescriptors = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _getOwnPropertyDescriptor = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/filter"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));

var _defineProperty3 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/defineProperty"));

var _setTimeout2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/set-timeout"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/createClass"));

var _tapeCatch = _interopRequireDefault(require("tape-catch"));

var _sinon = _interopRequireDefault(require("sinon"));

var _impressions = _interopRequireDefault(require("../impressions"));

var _constants = require("../../utils/context/constants");

function ownKeys(object, enumerableOnly) { var keys = (0, _keys.default)(object); if (_getOwnPropertySymbols.default) { var symbols = (0, _getOwnPropertySymbols.default)(object); if (enumerableOnly) symbols = (0, _filter.default)(symbols).call(symbols, function (sym) { return (0, _getOwnPropertyDescriptor.default)(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context; (0, _forEach.default)(_context = ownKeys(Object(source), true)).call(_context, function (key) { (0, _defineProperty3.default)(target, key, source[key]); }); } else if (_getOwnPropertyDescriptors.default) { (0, _defineProperties.default)(target, (0, _getOwnPropertyDescriptors.default)(source)); } else { var _context2; (0, _forEach.default)(_context2 = ownKeys(Object(source))).call(_context2, function (key) { (0, _defineProperty2.default)(target, key, (0, _getOwnPropertyDescriptor.default)(source, key)); }); } } return target; }

/* Mocks start */
var generateContextMocks = function generateContextMocks() {
  // We are only mocking the pieces we care about
  var fakeSettings = {
    runtime: {
      ip: 'fake-ip',
      hostname: 'fake-hostname'
    },
    version: 'js-test-10.4.0',
    impressionListener: {
      logImpression: _sinon.default.stub()
    }
  };
  var fakeStorage = {
    impressions: {
      track: _sinon.default.stub()
    }
  };
  var fakeIntegrationsManager = {
    handleImpression: _sinon.default.stub()
  };
  return {
    fakeSettings: fakeSettings,
    fakeStorage: fakeStorage,
    fakeIntegrationsManager: fakeIntegrationsManager
  };
};

var ContextMock = /*#__PURE__*/function () {
  function ContextMock(fakeStorage, fakeSettings, fakeIntegrationsManager) {
    (0, _classCallCheck2.default)(this, ContextMock);
    this.constants = {
      STORAGE: _constants.STORAGE,
      SETTINGS: _constants.SETTINGS,
      INTEGRATIONS_MANAGER: _constants.INTEGRATIONS_MANAGER
    };
    this.fakeStorage = fakeStorage;
    this.fakeSettings = fakeSettings;
    this.fakeIntegrationsManager = fakeIntegrationsManager;
  }

  (0, _createClass2.default)(ContextMock, [{
    key: "get",
    value: function get(target) {
      switch (target) {
        case _constants.STORAGE:
          return this.fakeStorage;

        case _constants.SETTINGS:
          return this.fakeSettings;

        case _constants.INTEGRATIONS_MANAGER:
          return this.fakeIntegrationsManager;

        default:
          break;
      }
    }
  }]);
  return ContextMock;
}();
/* Mocks end */


(0, _tapeCatch.default)('Impressions Tracker', function (t) {
  t.test('Tracker API', function (assert) {
    assert.equal((0, _typeof2.default)(_impressions.default), 'function', 'The module should return a function which acts as a factory.');

    var _generateContextMocks = generateContextMocks(),
        fakeStorage = _generateContextMocks.fakeStorage,
        fakeSettings = _generateContextMocks.fakeSettings;

    var contextMock = new ContextMock(fakeStorage, fakeSettings);
    var instance = (0, _impressions.default)(contextMock);
    assert.equal((0, _typeof2.default)(instance.queue), 'function', 'The instance should implement the queue method, as it is used for multiple impressions collecting.');
    assert.equal((0, _typeof2.default)(instance.track), 'function', 'The instance should implement the track method which will actually track queued impressions.');
    assert.end();
  });
  t.test('Should be able to queue elements and track them on demand.', function (assert) {
    var _generateContextMocks2 = generateContextMocks(),
        fakeStorage = _generateContextMocks2.fakeStorage,
        fakeSettings = _generateContextMocks2.fakeSettings;

    var contextMock = new ContextMock(fakeStorage, fakeSettings);
    var tracker = (0, _impressions.default)(contextMock);
    tracker.queue(10);
    tracker.queue(20);
    tracker.queue(30);
    assert.false(fakeStorage.impressions.track.called, 'storage method should not be called by just queueing items.');
    tracker.track();
    assert.true(fakeStorage.impressions.track.calledWithMatch([10, 20, 30]), 'Should call the storage track method once we invoke .track() method, passing queued params in a sequence.');
    assert.end();
  });
  var fakeImpression = {
    fake: 'impression'
  };
  var fakeImpression2 = {
    fake: 'impression_2'
  };
  var fakeAttributes = {
    fake: 'attributes'
  };
  t.test('Queued impressions should be sent to impression listener and integration manager when we invoke .track()', function (assert) {
    var _generateContextMocks3 = generateContextMocks(),
        fakeStorage = _generateContextMocks3.fakeStorage,
        fakeSettings = _generateContextMocks3.fakeSettings,
        fakeIntegrationsManager = _generateContextMocks3.fakeIntegrationsManager;

    var contextMock = new ContextMock(fakeStorage, fakeSettings, fakeIntegrationsManager);
    var tracker = (0, _impressions.default)(contextMock);
    tracker.queue(fakeImpression, fakeAttributes);
    tracker.queue(fakeImpression2, fakeAttributes);
    assert.false(fakeStorage.impressions.track.called, 'The storage should not be invoked while we are queueing impressions.');
    assert.false(fakeSettings.impressionListener.logImpression.called, 'The listener should not be invoked synchronously while we are queueing impressions.');
    assert.false(fakeIntegrationsManager.handleImpression.called, 'The integrations manager handleImpression method should not be invoked while we are queueing impressions.');
    (0, _setTimeout2.default)(function () {
      assert.false(fakeSettings.impressionListener.logImpression.called, 'The listener should not be invoked asynchronously either while we are queueing impressions.');
      assert.false(fakeIntegrationsManager.handleImpression.called, 'The integrations manager handleImpression method should not be invoked asynchronously either while we are queueing impressions.'); // We signal that we actually want to track the queued impressions.

      tracker.track();
      assert.true(fakeStorage.impressions.track.calledWithMatch([fakeImpression, fakeImpression2]), 'Even with a listener, impression should be present in the collector sequence and sent to the storage');
      assert.false(fakeSettings.impressionListener.logImpression.called, 'The listener should not be executed synchronously.');
      assert.false(fakeIntegrationsManager.handleImpression.called, 'The integrations manager handleImpression method should not be executed synchronously.');
      (0, _setTimeout2.default)(function () {
        assert.true(fakeSettings.impressionListener.logImpression.calledTwice, 'The listener should be executed after the timeout wrapping make it to the queue stack, once per each impression quued.');
        assert.true(fakeIntegrationsManager.handleImpression.calledTwice, 'The integrations manager handleImpression method should be executed after the timeout wrapping make it to the queue stack, once per each impression quued.');

        var impressionData1 = _objectSpread({
          impression: fakeImpression,
          attributes: fakeAttributes,
          sdkLanguageVersion: fakeSettings.version
        }, fakeSettings.runtime);

        var impressionData2 = _objectSpread({
          impression: fakeImpression2,
          attributes: fakeAttributes,
          sdkLanguageVersion: fakeSettings.version
        }, fakeSettings.runtime);

        assert.deepEqual(fakeSettings.impressionListener.logImpression.getCall(0).args[0], impressionData1, 'The listener should be executed with the corresponding map for each of the impressions.');
        assert.deepEqual(fakeSettings.impressionListener.logImpression.getCall(1).args[0], impressionData2, 'The listener should be executed with the corresponding map for each of the impressions.');
        assert.notEqual(fakeSettings.impressionListener.logImpression.getCall(0).args[0].impression, fakeImpression, 'but impression should be a copy');
        assert.notEqual(fakeSettings.impressionListener.logImpression.getCall(1).args[0].impression, fakeImpression2, 'but impression should be a copy');
        assert.deepEqual(fakeIntegrationsManager.handleImpression.getCall(0).args[0], impressionData1, 'The integration manager handleImpression method should be executed with the corresponding map for each of the impressions.');
        assert.deepEqual(fakeIntegrationsManager.handleImpression.getCall(1).args[0], impressionData2, 'The integration manager handleImpression method should be executed with the corresponding map for each of the impressions.');
        assert.notEqual(fakeIntegrationsManager.handleImpression.getCall(0).args[0].impression, fakeImpression, 'but impression should be a copy');
        assert.notEqual(fakeIntegrationsManager.handleImpression.getCall(1).args[0].impression, fakeImpression2, 'but impression should be a copy');
        assert.end();
      }, 0);
    }, 0);
  });
});
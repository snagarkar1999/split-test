"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs3/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _findIndexInstanceProperty = require("@babel/runtime-corejs3/core-js-stable/instance/find-index");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/is-array"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/promise"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));

var _lang = require("../../utils/lang");

var _logger = _interopRequireDefault(require("../../utils/logger"));

var _thenable = _interopRequireDefault(require("../../utils/promise/thenable"));

var LabelsConstants = _interopRequireWildcard(require("../../utils/labels"));

var _constants = require("../../utils/constants");

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
var log = (0, _logger.default)('splitio-engine:combiner');

function unexpectedInputHandler() {
  log.error('Invalid Split provided, no valid conditions found');
  return {
    treatment: _constants.CONTROL,
    label: LabelsConstants.EXCEPTION
  };
}

function computeTreatment(predicateResults) {
  var len = predicateResults.length;

  for (var i = 0; i < len; i++) {
    var evaluation = predicateResults[i];

    if (evaluation !== undefined) {
      log.debug("Treatment found: ".concat(evaluation.treatment));
      return evaluation;
    }
  }

  log.debug('All predicates evaluated, no treatment found.');
  return undefined;
}

function ifElseIfCombinerContext(predicates) {
  function ifElseIfCombiner(key, seed, trafficAllocation, trafficAllocationSeed, attributes, algo, splitEvaluator) {
    // In Async environments we are going to have async predicates. There is none way to know
    // before hand so we need to evaluate all the predicates, verify for thenables, and finally,
    // define how to return the treatment (wrap result into a Promise or not).
    var predicateResults = (0, _map.default)(predicates).call(predicates, function (evaluator) {
      return evaluator(key, seed, trafficAllocation, trafficAllocationSeed, splitEvaluator, attributes, algo);
    }); // if we find a thenable

    if ((0, _findIndexInstanceProperty(_lang))(predicateResults, _thenable.default) !== -1) {
      return _promise.default.all(predicateResults).then(function (results) {
        return computeTreatment(results);
      });
    }

    return computeTreatment(predicateResults);
  } // if there is none predicates, then there was an error in parsing phase


  if (!(0, _isArray.default)(predicates) || (0, _isArray.default)(predicates) && predicates.length === 0) {
    return unexpectedInputHandler;
  } else {
    return ifElseIfCombiner;
  }
}

var _default = ifElseIfCombinerContext;
exports.default = _default;
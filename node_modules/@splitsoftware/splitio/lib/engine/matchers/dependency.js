"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.split");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _stringify = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/json/stringify"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _indexOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/index-of"));

var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/is-array"));

var _logger = _interopRequireDefault(require("../../utils/logger"));

var _thenable = _interopRequireDefault(require("../../utils/promise/thenable"));

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
var log = (0, _logger.default)('splitio-engine:matcher');

function checkTreatment(evaluation, acceptableTreatments, parentName) {
  var _context, _context2, _context3, _context4, _context5;

  var matches = false;

  if ((0, _isArray.default)(acceptableTreatments)) {
    matches = (0, _indexOf.default)(acceptableTreatments).call(acceptableTreatments, evaluation.treatment) !== -1;
  }

  log.debug((0, _concat.default)(_context = (0, _concat.default)(_context2 = (0, _concat.default)(_context3 = (0, _concat.default)(_context4 = (0, _concat.default)(_context5 = "[dependencyMatcher] Parent split \"".concat(parentName, "\" evaluated to \"")).call(_context5, evaluation.treatment, "\" with label \"")).call(_context4, evaluation.label, "\". ")).call(_context3, parentName, " evaluated treatment is part of [")).call(_context2, acceptableTreatments, "] ? ")).call(_context, matches, "."));
  return matches;
}

function dependencyMatcherContext(_ref, storage) {
  var split = _ref.split,
      treatments = _ref.treatments;
  return function dependencyMatcher(_ref2, splitEvaluator) {
    var _context6, _context7;

    var key = _ref2.key,
        attributes = _ref2.attributes;
    log.debug((0, _concat.default)(_context6 = (0, _concat.default)(_context7 = "[dependencyMatcher] will evaluate parent split: \"".concat(split, "\" with key: ")).call(_context7, (0, _stringify.default)(key), " ")).call(_context6, attributes ? "\n attributes: ".concat((0, _stringify.default)(attributes)) : ''));
    var evaluation = splitEvaluator(key, split, attributes, storage);

    if ((0, _thenable.default)(evaluation)) {
      return evaluation.then(function (ev) {
        return checkTreatment(ev, treatments, split);
      });
    } else {
      return checkTreatment(evaluation, treatments, split);
    }
  };
}

var _default = dependencyMatcherContext;
exports.default = _default;
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));

var _getIterator2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/get-iterator"));

var _matchers = _interopRequireDefault(require("../transforms/matchers"));

var _treatments = _interopRequireDefault(require("../treatments"));

var _matchers2 = _interopRequireDefault(require("../matchers"));

var _value = _interopRequireDefault(require("../value"));

var _condition = _interopRequireDefault(require("../condition"));

var _ifelseif = _interopRequireDefault(require("../combiners/ifelseif"));

var _and = _interopRequireDefault(require("../combiners/and"));

var _thenable = _interopRequireDefault(require("../../utils/promise/thenable"));

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
function parse(conditions, storage) {
  var predicates = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = (0, _getIterator2.default)(conditions), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var condition = _step.value;
      var matchers = condition.matcherGroup.matchers,
          partitions = condition.partitions,
          label = condition.label,
          conditionType = condition.conditionType; // transform data structure

      matchers = (0, _matchers.default)(matchers); // create a set of pure functions from the matcher's dto

      var expressions = (0, _map.default)(matchers).call(matchers, function (matcherDto) {
        var matcher = (0, _matchers2.default)(matcherDto, storage); // Evaluator function.

        return function (key, attributes, splitEvaluator) {
          var value = (0, _value.default)(key, matcherDto, attributes);
          var result = value !== undefined ? matcher(value, splitEvaluator) : false;

          if ((0, _thenable.default)(result)) {
            return result.then(function (res) {
              return Boolean(res ^ matcherDto.negate);
            });
          }

          return Boolean(result ^ matcherDto.negate);
        };
      }); // if matcher's factory can't instanciate the matchers, the expressions array
      // will be empty

      if (expressions.length === 0) {
        // reset any data collected during parsing
        predicates = []; // and break the loop

        break;
      }

      predicates.push((0, _condition.default)((0, _and.default)(expressions), _treatments.default.parse(partitions), label, conditionType));
    } // Instanciate evaluator given the set of conditions using if else if logic

  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return (0, _ifelseif.default)(predicates);
}

var _default = parse;
exports.default = _default;
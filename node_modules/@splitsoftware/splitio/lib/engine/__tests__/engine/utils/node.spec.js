"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.to-string");

var _parseInt2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/parse-int"));

var _trim = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/trim"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/slicedToArray"));

var _tapeCatch = _interopRequireDefault(require("tape-catch"));

var _legacy = _interopRequireDefault(require("../../../engine/legacy"));

var _csvStreamify = _interopRequireDefault(require("csv-streamify"));

var _fs = _interopRequireDefault(require("fs"));

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
(0, _tapeCatch.default)('ENGINE / validate hashing behavior using sample data', function (assert) {
  var parser = (0, _csvStreamify.default)({
    objectMode: false
  });
  parser.on('data', function (line) {
    var _context;

    var _JSON$parse = JSON.parse((0, _trim.default)(_context = line.toString('utf8')).call(_context)),
        _JSON$parse2 = (0, _slicedToArray2.default)(_JSON$parse, 4),
        seed = _JSON$parse2[0],
        key = _JSON$parse2[1],
        hash = _JSON$parse2[2],
        bucket = _JSON$parse2[3];

    seed = (0, _parseInt2.default)(seed, 10);
    hash = (0, _parseInt2.default)(hash, 10);
    bucket = (0, _parseInt2.default)(bucket, 10);
    assert.equal(_legacy.default.hash(key, seed), hash, 'matching using int32 hash value');
    assert.equal(_legacy.default.bucket(key, seed), bucket, 'matching using int32 bucket value');
  }).on('end', assert.end);

  _fs.default.createReadStream(require.resolve('../mocks/small-data.csv')).pipe(parser);
});
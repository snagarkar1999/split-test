"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.split");

var _parseInt2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/parse-int"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/slicedToArray"));

var _setTimeout2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/set-timeout"));

var _getIterator2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/get-iterator"));

var _trim = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/trim"));

var _tapeCatch = _interopRequireDefault(require("tape-catch"));

var _murmur = _interopRequireDefault(require("../../../engine/murmur3"));

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
(0, _tapeCatch.default)('MURMUR3', function (t) {
  function assertText(text, assert) {
    var lines = (0, _trim.default)(text).call(text).split(/\r\n|\n|\r/);
    assert.plan(2 * lines.length);
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      var _loop = function _loop() {
        var parts = _step.value;
        (0, _setTimeout2.default)(function () {
          var _parts$split = parts.split(','),
              _parts$split2 = (0, _slicedToArray2.default)(_parts$split, 4),
              seed = _parts$split2[0],
              key = _parts$split2[1],
              hash = _parts$split2[2],
              bucket = _parts$split2[3];

          seed = (0, _parseInt2.default)(seed, 10);
          hash = (0, _parseInt2.default)(hash, 10);
          bucket = (0, _parseInt2.default)(bucket, 10);
          assert.equal(_murmur.default.hash(key, seed), hash);
          assert.equal(_murmur.default.bucket(key, seed), bucket);
        }, Math.random() * 10);
      };

      for (var _iterator = (0, _getIterator2.default)(lines), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        _loop();
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  t.test('validate hashing behavior using basic dataset', function (assert) {
    fetch('/base/engine/__tests__/engine/mocks/murmur3-sample-data-v2.csv').then(function (response) {
      return response.text();
    }).then(function (text) {
      return assertText(text, assert);
    }).catch(function (error) {
      return assert.error(error);
    });
  });
  t.test('validate hashing behavior using chinese dataset', function (assert) {
    fetch('/base/engine/__tests__/engine/mocks/murmur3-sample-data-non-alpha-numeric-v2.csv').then(function (response) {
      return response.text();
    }).then(function (text) {
      return assertText(text, assert);
    }).catch(function (error) {
      return assert.error(error);
    });
  });
});
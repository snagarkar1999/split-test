"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.split");

var _parseInt2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/parse-int"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/slicedToArray"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _tapeCatch = _interopRequireDefault(require("tape-catch"));

var _fs = _interopRequireDefault(require("fs"));

var _readline = _interopRequireDefault(require("readline"));

var _murmur = _interopRequireDefault(require("../../../engine/murmur3"));

var _context;

(0, _forEach.default)(_context = ['murmur3-sample-v4.csv', 'murmur3-sample-v3.csv', 'murmur3-sample-data-v2.csv', 'murmur3-sample-data-non-alpha-numeric-v2.csv', 'murmur3-sample-double-treatment-users.csv']).call(_context, function (filename) {
  (0, _tapeCatch.default)('MURMUR3 / validate hashing behavior using sample data', function (assert) {
    var parser = _readline.default.createInterface({
      terminal: false,
      input: _fs.default.createReadStream(require.resolve("../mocks/".concat(filename)))
    });

    parser.on('line', function (line) {
      var parts = line.toString('utf8').split(',');

      if (parts.length === 4) {
        var _parts = (0, _slicedToArray2.default)(parts, 4),
            seed = _parts[0],
            key = _parts[1],
            hash = _parts[2],
            bucket = _parts[3];

        seed = (0, _parseInt2.default)(seed, 10);
        hash = (0, _parseInt2.default)(hash, 10);
        bucket = (0, _parseInt2.default)(bucket, 10);
        assert.equal(_murmur.default.hash(key, seed), hash);
        assert.equal(_murmur.default.bucket(key, seed), bucket);
      }
    }).on('close', assert.end);
  });
});
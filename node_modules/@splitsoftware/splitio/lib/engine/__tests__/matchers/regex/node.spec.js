"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.split");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/slicedToArray"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _tapeCatch = _interopRequireDefault(require("tape-catch"));

var _types = require("../../../matchers/types");

var _matchers = _interopRequireDefault(require("../../../matchers"));

var _fs = _interopRequireDefault(require("fs"));

var _readline = _interopRequireDefault(require("readline"));

var _context;

(0, _forEach.default)(_context = ['regex.txt']).call(_context, function (filename) {
  (0, _tapeCatch.default)('MATCHER REGEX / validate regex behavior using sample data', function (assert) {
    var parser = _readline.default.createInterface({
      terminal: false,
      input: _fs.default.createReadStream(require.resolve("../mocks/".concat(filename)))
    });

    parser.on('line', function (line) {
      var parts = line.toString('utf8').split('#');

      if (parts.length === 3) {
        var _parts = (0, _slicedToArray2.default)(parts, 3),
            regex = _parts[0],
            input = _parts[1],
            test = _parts[2];

        test = test === 'true';
        var matcher = (0, _matchers.default)({
          type: _types.types.MATCHES_STRING,
          value: regex
        });
        assert.true(matcher(input) === test);
      }
    }).on('close', assert.end);
  });
});